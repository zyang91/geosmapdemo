{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geosmapdemo","text":"<p>**this is a software for interactive mapping. **</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://zyang91.github.io/geosmapdemo</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-3202023","title":"v0.0.1 - 3/20/2023","text":"<p>Improvement:</p> <ul> <li>Initial release</li> <li>Creating the package basic </li> <li>deployment pages and publish pypi interface</li> </ul> <p>New Features:</p> <ul> <li>No features available at this time</li> <li>Please stay in turn, thank you for your patience </li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at zyang91@binghamton.edu. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/zyang91/geosmapdemo/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>geosmapdemo could always use more documentation, whether as part of the official geosmapdemo docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/zyang91/geosmapdemo/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geosmapdemo for local development.</p> <ol> <li> <p>Fork the geosmapdemo repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geosmapdemo.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geosmapdemo\n$ cd geosmapdemo/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geosmapdemo tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/zyang91/geosmapdemo/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#what-is-the-function-of-geosmapdemo","title":"What is the function of \"geosmapdemo\"?","text":"<p>\"Geosmapdemo\" package is developed based on GEOG510 online lecture taught by Dr. Qiusheng Wu. There is no available function right now. It's just testing the students how to create a open source software.</p>"},{"location":"faq/#will-there-be-new-features-or-new-function-release-in-the-near-future","title":"Will there be new features or new function release in the near future?","text":"<p>Not really sure.  Please stay in turn! </p>"},{"location":"faq/#note","title":"Note","text":"<p>All the jupyter notebook within this packages are intended for educational purpose only. Please do not use it for any commercial purpose. They are suitable for new income python learner. Great work</p>"},{"location":"geosmapdemo/","title":"geosmapdemo module","text":"<p>Main module.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install geosmapdemo, run this command in your terminal:</p> <pre><code>pip install geosmapdemo\n</code></pre> <p>This is the preferred method to install geosmapdemo, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for geosmapdemo can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/zyang91/geosmapdemo\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use geosmapdemo in a project:</p> <pre><code>import geosmapdemo\n</code></pre>"},{"location":"python/Classes/","title":"Classes","text":"In\u00a0[1]: Copied! <pre>class Dog: #title case when create class\n    \"\"\"A simple attempt to model a dog.\"\"\"\n\n    def __init__(self, name, age): #construct \n        \"\"\"Initialize name and age attributes.\"\"\"\n        self.name = name\n        self.age = age\n\n    def sit(self): #method\n        \"\"\"Simulate a dog sitting in response to a command.\"\"\"\n        print(f\"{self.name} is now sitting.\")\n\n    def roll_over(self):\n        \"\"\"Simulate rolling over in response to a command.\"\"\"\n        print(f\"{self.name} rolled over!\")\n</pre> class Dog: #title case when create class     \"\"\"A simple attempt to model a dog.\"\"\"      def __init__(self, name, age): #construct          \"\"\"Initialize name and age attributes.\"\"\"         self.name = name         self.age = age      def sit(self): #method         \"\"\"Simulate a dog sitting in response to a command.\"\"\"         print(f\"{self.name} is now sitting.\")      def roll_over(self):         \"\"\"Simulate rolling over in response to a command.\"\"\"         print(f\"{self.name} rolled over!\") <p>There\u2019s a lot to notice here, but don\u2019t worry. You\u2019ll see this structure throughout this chapter and have lots of time to get used to it. At \u278a we define a class called Dog. By convention, capitalized names refer to classes in Python. There are no parentheses in the class definition because we\u2019re creating this class from scratch. At \u278b we write a docstring describing what this class does.</p> In\u00a0[2]: Copied! <pre>my_dog = Dog('Willie', 6)\nprint(f\"My dog's name is {my_dog.name}.\")\nprint(f\"My dog is {my_dog.age} years old.\")\n</pre> my_dog = Dog('Willie', 6) print(f\"My dog's name is {my_dog.name}.\") print(f\"My dog is {my_dog.age} years old.\") <pre>My dog's name is Willie.\nMy dog is 6 years old.\n</pre> In\u00a0[3]: Copied! <pre>class Dog: #title case when create class\n    \"\"\"A simple attempt to model a dog.\"\"\"\n\n    def __init__(self, name, age = 1, **kwargs): #construct \n        \"\"\"Initialize name and age attributes.\"\"\"\n        self.name = name\n        self.age = age\n        if 'owner' in kwargs:\n            print(f\"My owner is {kwargs['owner']}\")\n\n    def sit(self): #method\n        \"\"\"Simulate a dog sitting in response to a command.\"\"\"\n        print(f\"{self.name} is now sitting.\")\n\n    def roll_over(self):\n        \"\"\"Simulate rolling over in response to a command.\"\"\"\n        print(f\"{self.name} rolled over!\")\nmy_dog = Dog('Willie', owner ='Eric')\nprint(f\"My dog's name is {my_dog.name}.\")\nprint(f\"My dog is {my_dog.age} years old.\")\n</pre> class Dog: #title case when create class     \"\"\"A simple attempt to model a dog.\"\"\"      def __init__(self, name, age = 1, **kwargs): #construct          \"\"\"Initialize name and age attributes.\"\"\"         self.name = name         self.age = age         if 'owner' in kwargs:             print(f\"My owner is {kwargs['owner']}\")      def sit(self): #method         \"\"\"Simulate a dog sitting in response to a command.\"\"\"         print(f\"{self.name} is now sitting.\")      def roll_over(self):         \"\"\"Simulate rolling over in response to a command.\"\"\"         print(f\"{self.name} rolled over!\") my_dog = Dog('Willie', owner ='Eric') print(f\"My dog's name is {my_dog.name}.\") print(f\"My dog is {my_dog.age} years old.\") <pre>My owner is Eric\nMy dog's name is Willie.\nMy dog is 1 years old.\n</pre> In\u00a0[4]: Copied! <pre>import leafmap\n</pre> import leafmap In\u00a0[5]: Copied! <pre>m= leafmap.Map()\nm\n</pre> m= leafmap.Map() m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[6]: Copied! <pre>m2 = leafmap.Map(center=[40,-100], zoom=4)\nm2\n</pre> m2 = leafmap.Map(center=[40,-100], zoom=4) m2 <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre> In\u00a0[7]: Copied! <pre>m2 = leafmap.Map(center=[40,-100], zoom=4, toolbar_control=False) #eliminate the toolbar control\nm2\n</pre> m2 = leafmap.Map(center=[40,-100], zoom=4, toolbar_control=False) #eliminate the toolbar control m2 <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre> In\u00a0[8]: Copied! <pre>my_dog = Dog('Willie', 6)\nmy_dog.sit()\nmy_dog.roll_over()\n</pre> my_dog = Dog('Willie', 6) my_dog.sit() my_dog.roll_over() <pre>Willie is now sitting.\nWillie rolled over!\n</pre> In\u00a0[9]: Copied! <pre>class Dog: #title case when create class\n    \"\"\"A simple attempt to model a dog.\"\"\"\n\n    def __init__(self, name, age = 1, **kwargs): #construct \n        \"\"\"Initialize name and age attributes.\"\"\"\n        self.name = name\n        self.age = age\n        if 'owner' in kwargs:\n            self.owner = kwargs['owner']\n\n    def sit(self): #method\n        \"\"\"Simulate a dog sitting in response to a command.\"\"\"\n        print(f\"{self.name} is now sitting.\")\n\n    def roll_over(self):\n        \"\"\"Simulate rolling over in response to a command.\"\"\"\n        print(f\"{self.name} rolled over!\")\n</pre> class Dog: #title case when create class     \"\"\"A simple attempt to model a dog.\"\"\"      def __init__(self, name, age = 1, **kwargs): #construct          \"\"\"Initialize name and age attributes.\"\"\"         self.name = name         self.age = age         if 'owner' in kwargs:             self.owner = kwargs['owner']      def sit(self): #method         \"\"\"Simulate a dog sitting in response to a command.\"\"\"         print(f\"{self.name} is now sitting.\")      def roll_over(self):         \"\"\"Simulate rolling over in response to a command.\"\"\"         print(f\"{self.name} rolled over!\")  In\u00a0[10]: Copied! <pre>my_dog = Dog('Williw', 6, owner ='chen')\n</pre> my_dog = Dog('Williw', 6, owner ='chen')  In\u00a0[11]: Copied! <pre>my_dog.owner\n</pre> my_dog.owner Out[11]: <pre>'chen'</pre> In\u00a0[12]: Copied! <pre>my_dog = Dog('Willie', 6)\nmy_dog.sit()\nmy_dog.roll_over()\n</pre> my_dog = Dog('Willie', 6) my_dog.sit() my_dog.roll_over() <pre>Willie is now sitting.\nWillie rolled over!\n</pre> In\u00a0[13]: Copied! <pre>class Car:\n    \"\"\"A simple attempt to represent a car.\"\"\"\n\n    def __init__(self, make, model, year):\n        \"\"\"Initialize attributes to describe a car.\"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def get_descriptive_name(self):\n        \"\"\"Return a neatly formatted descriptive name.\"\"\"\n        long_name = f\"{self.year} {self.make} {self.model}\"\n        return long_name.title()\n\nmy_new_car = Car('audi', 'a4', 2019)\nprint(my_new_car.get_descriptive_name())\n</pre> class Car:     \"\"\"A simple attempt to represent a car.\"\"\"      def __init__(self, make, model, year):         \"\"\"Initialize attributes to describe a car.\"\"\"         self.make = make         self.model = model         self.year = year      def get_descriptive_name(self):         \"\"\"Return a neatly formatted descriptive name.\"\"\"         long_name = f\"{self.year} {self.make} {self.model}\"         return long_name.title()  my_new_car = Car('audi', 'a4', 2019) print(my_new_car.get_descriptive_name()) <pre>2019 Audi A4\n</pre> In\u00a0[14]: Copied! <pre>class Car:\n    \"\"\"A simple attempt to represent a car.\"\"\"\n\n    def __init__(self, make, model, year): #only 1\n        \"\"\"Initialize attributes to describe a car.\"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer_reading = 0 #set the default value\n\n    def get_descriptive_name(self): #as many as possible\n        \"\"\"Return a neatly formatted descriptive name.\"\"\"\n        long_name = f\"{self.year} {self.make} {self.model}\"\n        return long_name.title()\n\n    def read_odometer(self):\n        \"\"\"Print a statement showing the car's mileage.\"\"\"\n        print(f\"This car has {self.odometer_reading} miles on it.\")\n\nmy_new_car = Car('audi', 'a4', 2019)\nprint(my_new_car.get_descriptive_name())\nmy_new_car.read_odometer()\n</pre> class Car:     \"\"\"A simple attempt to represent a car.\"\"\"      def __init__(self, make, model, year): #only 1         \"\"\"Initialize attributes to describe a car.\"\"\"         self.make = make         self.model = model         self.year = year         self.odometer_reading = 0 #set the default value      def get_descriptive_name(self): #as many as possible         \"\"\"Return a neatly formatted descriptive name.\"\"\"         long_name = f\"{self.year} {self.make} {self.model}\"         return long_name.title()      def read_odometer(self):         \"\"\"Print a statement showing the car's mileage.\"\"\"         print(f\"This car has {self.odometer_reading} miles on it.\")  my_new_car = Car('audi', 'a4', 2019) print(my_new_car.get_descriptive_name()) my_new_car.read_odometer() <pre>2019 Audi A4\nThis car has 0 miles on it.\n</pre> In\u00a0[15]: Copied! <pre>my_new_car = Car('audi', 'a4', 2019)\nprint(my_new_car.get_descriptive_name())\nmy_new_car.odometer_reading = 23\nmy_new_car.read_odometer()\n</pre> my_new_car = Car('audi', 'a4', 2019) print(my_new_car.get_descriptive_name()) my_new_car.odometer_reading = 23 my_new_car.read_odometer() <pre>2019 Audi A4\nThis car has 23 miles on it.\n</pre> In\u00a0[16]: Copied! <pre>class Car:\n    \"\"\"A simple attempt to represent a car.\"\"\"\n\n    def __init__(self, make, model, year):\n        \"\"\"Initialize attributes to describe a car.\"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer_reading = 0\n\n    def get_descriptive_name(self):\n        \"\"\"Return a neatly formatted descriptive name.\"\"\"\n        long_name = f\"{self.year} {self.make} {self.model}\"\n        return long_name.title()\n\n    def read_odometer(self):\n        \"\"\"Print a statement showing the car's mileage.\"\"\"\n        print(f\"This car has {self.odometer_reading} miles on it.\")\n\n    def update_odometer(self, mileage):\n        \"\"\"\n        Set the odometer reading to the given value.\n        Reject the change if it attempts to roll the odometer back.\n        \"\"\"\n        self.odometer_reading = mileage\n\nmy_new_car = Car('audi', 'a4', 2019)\nprint(my_new_car.get_descriptive_name())\n\nmy_new_car.update_odometer(23)\nmy_new_car.read_odometer()\n</pre> class Car:     \"\"\"A simple attempt to represent a car.\"\"\"      def __init__(self, make, model, year):         \"\"\"Initialize attributes to describe a car.\"\"\"         self.make = make         self.model = model         self.year = year         self.odometer_reading = 0      def get_descriptive_name(self):         \"\"\"Return a neatly formatted descriptive name.\"\"\"         long_name = f\"{self.year} {self.make} {self.model}\"         return long_name.title()      def read_odometer(self):         \"\"\"Print a statement showing the car's mileage.\"\"\"         print(f\"This car has {self.odometer_reading} miles on it.\")      def update_odometer(self, mileage):         \"\"\"         Set the odometer reading to the given value.         Reject the change if it attempts to roll the odometer back.         \"\"\"         self.odometer_reading = mileage  my_new_car = Car('audi', 'a4', 2019) print(my_new_car.get_descriptive_name())  my_new_car.update_odometer(23) my_new_car.read_odometer() <pre>2019 Audi A4\nThis car has 23 miles on it.\n</pre> In\u00a0[17]: Copied! <pre>class Car:\n    \"\"\"A simple attempt to represent a car.\"\"\"\n\n    def __init__(self, make, model, year):\n        \"\"\"Initialize attributes to describe a car.\"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer_reading = 0\n\n    def get_descriptive_name(self):\n        \"\"\"Return a neatly formatted descriptive name.\"\"\"\n        long_name = f\"{self.year} {self.make} {self.model}\"\n        return long_name.title()\n\n    def read_odometer(self):\n        \"\"\"Print a statement showing the car's mileage.\"\"\"\n        print(f\"This car has {self.odometer_reading} miles on it.\")\n\n    def update_odometer(self, mileage):\n        \"\"\"\n        Set the odometer reading to the given value.\n        Reject the change if it attempts to roll the odometer back.\n        \"\"\"\n        if mileage &gt;= self.odometer_reading:\n            self.odometer_reading = mileage\n        else:\n            print(\"You can't roll back an odometer!\")\n\nmy_new_car = Car('audi', 'a4', 2019)\nprint(my_new_car.get_descriptive_name())\n\nmy_new_car.update_odometer(23)\nmy_new_car.read_odometer()\n\nmy_new_car.update_odometer(10)\nmy_new_car.read_odometer()\n</pre> class Car:     \"\"\"A simple attempt to represent a car.\"\"\"      def __init__(self, make, model, year):         \"\"\"Initialize attributes to describe a car.\"\"\"         self.make = make         self.model = model         self.year = year         self.odometer_reading = 0      def get_descriptive_name(self):         \"\"\"Return a neatly formatted descriptive name.\"\"\"         long_name = f\"{self.year} {self.make} {self.model}\"         return long_name.title()      def read_odometer(self):         \"\"\"Print a statement showing the car's mileage.\"\"\"         print(f\"This car has {self.odometer_reading} miles on it.\")      def update_odometer(self, mileage):         \"\"\"         Set the odometer reading to the given value.         Reject the change if it attempts to roll the odometer back.         \"\"\"         if mileage &gt;= self.odometer_reading:             self.odometer_reading = mileage         else:             print(\"You can't roll back an odometer!\")  my_new_car = Car('audi', 'a4', 2019) print(my_new_car.get_descriptive_name())  my_new_car.update_odometer(23) my_new_car.read_odometer()  my_new_car.update_odometer(10) my_new_car.read_odometer() <pre>2019 Audi A4\nThis car has 23 miles on it.\nYou can't roll back an odometer!\nThis car has 23 miles on it.\n</pre> In\u00a0[18]: Copied! <pre>class Car:\n    \"\"\"A simple attempt to represent a car.\"\"\"\n\n    def __init__(self, make, model, year):\n        \"\"\"Initialize attributes to describe a car.\"\"\"\n        self.make = make\n        self.model = model\n        self.year = year\n        self.odometer_reading = 0\n\n    def get_descriptive_name(self):\n        \"\"\"Return a neatly formatted descriptive name.\"\"\"\n        long_name = f\"{self.year} {self.make} {self.model}\"\n        return long_name.title()\n\n    def read_odometer(self):\n        \"\"\"Print a statement showing the car's mileage.\"\"\"\n        print(f\"This car has {self.odometer_reading} miles on it.\")\n\n    def update_odometer(self, mileage):\n        \"\"\"\n        Set the odometer reading to the given value.\n        Reject the change if it attempts to roll the odometer back.\n        \"\"\"\n        if mileage &gt;= self.odometer_reading:\n            self.odometer_reading = mileage\n        else:\n            print(\"You can't roll back an odometer!\")\n\n    def increment_odometer(self, miles):\n        \"\"\"Add the given amount to the odometer reading.\"\"\"\n        self.odometer_reading += miles\n\nmy_used_car = Car('subaru', 'outback', 2015)\nprint(my_used_car.get_descriptive_name())\n\nmy_used_car.update_odometer(23_500)\nmy_used_car.read_odometer()\n\nmy_used_car.increment_odometer(100)\nmy_used_car.read_odometer()\n</pre> class Car:     \"\"\"A simple attempt to represent a car.\"\"\"      def __init__(self, make, model, year):         \"\"\"Initialize attributes to describe a car.\"\"\"         self.make = make         self.model = model         self.year = year         self.odometer_reading = 0      def get_descriptive_name(self):         \"\"\"Return a neatly formatted descriptive name.\"\"\"         long_name = f\"{self.year} {self.make} {self.model}\"         return long_name.title()      def read_odometer(self):         \"\"\"Print a statement showing the car's mileage.\"\"\"         print(f\"This car has {self.odometer_reading} miles on it.\")      def update_odometer(self, mileage):         \"\"\"         Set the odometer reading to the given value.         Reject the change if it attempts to roll the odometer back.         \"\"\"         if mileage &gt;= self.odometer_reading:             self.odometer_reading = mileage         else:             print(\"You can't roll back an odometer!\")      def increment_odometer(self, miles):         \"\"\"Add the given amount to the odometer reading.\"\"\"         self.odometer_reading += miles  my_used_car = Car('subaru', 'outback', 2015) print(my_used_car.get_descriptive_name())  my_used_car.update_odometer(23_500) my_used_car.read_odometer()  my_used_car.increment_odometer(100) my_used_car.read_odometer() <pre>2015 Subaru Outback\nThis car has 23500 miles on it.\nThis car has 23600 miles on it.\n</pre>"},{"location":"python/Classes/#classes","title":"Classes\u00b6","text":"<p>Object-oriented programming is one of the most effective approaches to writing software. In object-oriented programming you write classes that represent real-world things and situations, and you create objects based on these classes. When you write a class, you define the general behavior that a whole category of objects can have. When you create individual objects from the class, each object is automatically equipped with the general behavior; you can then give each object whatever unique traits you desire. You\u2019ll be amazed how well real-world situations can be modeled with object-oriented programming.</p> <p>Making an object from a class is called instantiation, and you work with instances of a class. In this chapter you\u2019ll write classes and create instances of those classes. You\u2019ll specify the kind of information that can be stored in instances, and you\u2019ll define actions that can be taken with these instances. You\u2019ll also write classes that extend the functionality of existing classes, so similar classes can share code efficiently. You\u2019ll store your classes in modules and import classes written by other programmers into your own program files.</p> <p>Understanding object-oriented programming will help you see the world as a programmer does. It\u2019ll help you really know your code, not just what\u2019s happening line by line, but also the bigger concepts behind it. Knowing the logic behind classes will train you to think logically so you can write programs that effectively address almost any problem you encounter.</p> <p>Classes also make life easier for you and the other programmers you\u2019ll work with as you take on increasingly complex challenges. When you and other programmers write code based on the same kind of logic, you\u2019ll be able to understand each other\u2019s work. Your programs will make sense to many collaborators, allowing everyone to accomplish more.</p>"},{"location":"python/Classes/#creating-and-using-a-class","title":"CREATING AND USING A CLASS \u00b6","text":"<p>You can model almost anything using classes. Let\u2019s start by writing a simple class, Dog, that represents a dog\u2014not one dog in particular, but any dog. What do we know about most pet dogs? Well, they all have a name and age. We also know that most dogs sit and roll over. Those two pieces of information (name and age) and those two behaviors (sit and roll over) will go in our Dog class because they\u2019re common to most dogs. This class will tell Python how to make an object representing a dog. After our class is written, we\u2019ll use it to make individual instances, each of which represents one specific dog.</p>"},{"location":"python/Classes/#creating-the-dog-class","title":"Creating the Dog Class\u00b6","text":"<p>Each instance created from the Dog class will store a name and an age, and we\u2019ll give each dog the ability to sit() and roll_over():</p>"},{"location":"python/Classes/#the-__init__-method","title":"The <code>__init__()</code> Method\u00b6","text":"<p>A function that\u2019s part of a class is a method. Everything you learned about functions applies to methods as well; the only practical difference for now is the way we\u2019ll call methods. The <code>__init__()</code> method at \u278c is a special method that Python runs automatically whenever we create a new instance based on the Dog class. This method has two leading underscores and two trailing underscores, a convention that helps prevent Python\u2019s default method names from conflicting with your method names. Make sure to use two underscores on each side of <code>__init__()</code>. If you use just one on each side, the method won\u2019t be called automatically when you use your class, which can result in errors that are difficult to identify.</p> <p>We define the <code>__init__()</code> method to have three parameters: self, name, and age. The self parameter is required in the method definition, and it must come first before the other parameters. It must be included in the definition because when Python calls this method later (to create an instance of Dog), the method call will automatically pass the self argument. Every method call associated with an instance automatically passes self, which is a reference to the instance itself; it gives the individual instance access to the attributes and methods in the class. When we make an instance of Dog, Python will call the <code>__init__()</code> method from the Dog class. We\u2019ll pass Dog() a name and an age as arguments; self is passed automatically, so we don\u2019t need to pass it. Whenever we want to make an instance from the Dog class, we\u2019ll provide values for only the last two parameters, name and age.</p> <p>The two variables defined at \u278d each have the prefix self. Any variable prefixed with self is available to every method in the class, and we\u2019ll also be able to access these variables through any instance created from the class. The line self.name = name takes the value associated with the parameter name and assigns it to the variable name, which is then attached to the instance being created. The same process happens with self.age = age. Variables that are accessible through instances like this are called attributes.</p> <p>The Dog class has two other methods defined: sit() and roll_over() \u278e. Because these methods don\u2019t need additional information to run, we just define them to have one parameter, self. The instances we create later will have access to these methods. In other words, they\u2019ll be able to sit and roll over. For now, sit() and roll_over() don\u2019t do much. They simply print a message saying the dog is sitting or rolling over. But the concept can be extended to realistic situations: if this class were part of an actual computer game, these methods would contain code to make an animated dog sit and roll over. If this class was written to control a robot, these methods would direct movements that cause a robotic dog to sit and roll over.</p>"},{"location":"python/Classes/#making-an-instance-from-a-class","title":"Making an Instance from a Class\u00b6","text":"<p>Think of a class as a set of instructions for how to make an instance. The class Dog is a set of instructions that tells Python how to make individual instances representing specific dogs.</p> <p>Let\u2019s make an instance representing a specific dog:</p>"},{"location":"python/Classes/#example","title":"Example\u00b6","text":"<p>script from leafmap Source code https://leafmap.org/leafmap/</p> <pre>class Map(ipyleaflet.Map):\n\n    def __init__(self, **kwargs): #default setting\n        if \"center\" not in kwargs:\n            kwargs[\"center\"] = [20, 0]\n\n        if \"zoom\" not in kwargs:\n            kwargs[\"zoom\"] = 2\n\n        if \"max_zoom\" not in kwargs:\n            kwargs[\"max_zoom\"] = 24\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n</pre>"},{"location":"python/Classes/#accessing-attributes","title":"Accessing Attributes\u00b6","text":"<p>To access the attributes of an instance, you use dot notation. At \u278b we access the value of my_dog\u2019s attribute name by writing:</p> <pre><code>my_dog.name\n</code></pre> <p>Dot notation is used often in Python. This syntax demonstrates how Python finds an attribute\u2019s value. Here Python looks at the instance my_dog and then finds the attribute name associated with my_dog. This is the same attribute referred to as self.name in the class Dog. At \u278c we use the same approach to work with the attribute age.</p>"},{"location":"python/Classes/#calling-methods","title":"Calling Methods\u00b6","text":"<p>After we create an instance from the class Dog, we can use dot notation to call any method defined in Dog. Let\u2019s make our dog sit and roll over:</p>"},{"location":"python/Classes/#working-with-classes-and-instances","title":"WORKING WITH CLASSES AND INSTANCES \u00b6","text":"<p>You can use classes to represent many real-world situations. Once you write a class, you\u2019ll spend most of your time working with instances created from that class. One of the first tasks you\u2019ll want to do is modify the attributes associated with a particular instance. You can modify the attributes of an instance directly or write methods that update attributes in specific ways.</p>"},{"location":"python/Classes/#the-car-class","title":"The Car Class\u00b6","text":"<p>Let\u2019s write a new class representing a car. Our class will store information about the kind of car we\u2019re working with, and it will have a method that summarizes this information:</p>"},{"location":"python/Classes/#setting-a-default-value-for-an-attribute","title":"Setting a Default Value for an Attribute\u00b6","text":"<p>When an instance is created, attributes can be defined without being passed in as parameters. These attributes can be defined in the <code>__init__()</code> method, where they are assigned a default value.</p> <p>Let\u2019s add an attribute called odometer_reading that always starts with a value of 0. We\u2019ll also add a method read_odometer() that helps us read each car\u2019s odometer:</p>"},{"location":"python/Classes/#modifying-attribute-values","title":"Modifying Attribute Values\u00b6","text":"<p>You can change an attribute\u2019s value in three ways: you can change the value directly through an instance, set the value through a method, or increment the value (add a certain amount to it) through a method. Let\u2019s look at each of these approaches.</p>"},{"location":"python/Classes/#modifying-an-attributes-value-directly","title":"Modifying an Attribute\u2019s Value Directly\u00b6","text":"<p>The simplest way to modify the value of an attribute is to access the attribute directly through an instance. Here we set the odometer reading to 23 directly:</p>"},{"location":"python/Classes/#modifying-an-attributes-value-through-a-method","title":"Modifying an Attribute\u2019s Value Through a Method\u00b6","text":"<p>It can be helpful to have methods that update certain attributes for you. Instead of accessing the attribute directly, you pass the new value to a method that handles the updating internally. Here\u2019s an example showing a method called update_odometer():</p>"},{"location":"python/Classes/#incrementing-an-attributes-value-through-a-method","title":"Incrementing an Attribute\u2019s Value Through a Method\u00b6","text":"<p>Sometimes you\u2019ll want to increment an attribute\u2019s value by a certain amount rather than set an entirely new value. Say we buy a used car and put 100 miles on it between the time we buy it and the time we register it. Here\u2019s a method that allows us to pass this incremental amount and add that value to the odometer reading:</p>"},{"location":"python/Classes/#finish","title":"Finish\u00b6","text":""},{"location":"python/Classes/#references","title":"References\u00b6","text":"<ul> <li>Matthes, Eric (2022). Python Crash Course, 3rd Edition: A Hands-On, Project-Based Introduction to Programming. No Starch Press. ISBN: 978-1593279288. (Publisher website)</li> <li>Dr.Qiusheng Wu online lecture</li> </ul>"},{"location":"python/Conditional_statement/","title":"Conditional Statements","text":"In\u00a0[1]: Copied! <pre>cars = ['audi', 'bmw', 'subaru', 'toyota']\n\nfor car in cars:\n    if car == 'bmw':\n        print(car.upper())\n    else:\n        print(car.title())\n</pre> cars = ['audi', 'bmw', 'subaru', 'toyota']  for car in cars:     if car == 'bmw':         print(car.upper())     else:         print(car.title()) <pre>Audi\nBMW\nSubaru\nToyota\n</pre> In\u00a0[2]: Copied! <pre>cars = ['audi', 'bmw', 'subaru', 'toyota']\n\n# first variable dosen't matter (can be anything, e.g. car can be instead of b)\n\nfor b in cars:\n    if b == 'bmw':\n        print(b.upper())\n    else:\n        print(b.title())\n</pre> cars = ['audi', 'bmw', 'subaru', 'toyota']  # first variable dosen't matter (can be anything, e.g. car can be instead of b)  for b in cars:     if b == 'bmw':         print(b.upper())     else:         print(b.title()) <pre>Audi\nBMW\nSubaru\nToyota\n</pre> In\u00a0[5]: Copied! <pre>cars = ['audi', 'bmw', 'subaru', 'toyota']\n# != means unequal.\nfor b in cars:\n    if b != 'bmw':\n        print(b.upper())\n    else:\n        print(b.title())\n</pre> cars = ['audi', 'bmw', 'subaru', 'toyota'] # != means unequal. for b in cars:     if b != 'bmw':         print(b.upper())     else:         print(b.title()) <pre>AUDI\nBmw\nSUBARU\nTOYOTA\n</pre> In\u00a0[4]: Copied! <pre>students = ['geography', 'chemistry', 'studio art', 'math', 'geography']\nfor student in students:\n    if student == 'geography':\n        print('you need do extra work')\n    else:\n        print('you are good to go.')\n</pre> students = ['geography', 'chemistry', 'studio art', 'math', 'geography'] for student in students:     if student == 'geography':         print('you need do extra work')     else:         print('you are good to go.') <pre>you need do extra work\nyou are good to go.\nyou are good to go.\nyou are good to go.\nyou need do extra work\n</pre> In\u00a0[6]: Copied! <pre>car = 'bmw' #assign value to variable\ncar == 'bmw' #either true or false\n</pre> car = 'bmw' #assign value to variable car == 'bmw' #either true or false Out[6]: <pre>True</pre> In\u00a0[8]: Copied! <pre>result = car =='bmw'\nresult\n</pre> result = car =='bmw' result Out[8]: <pre>True</pre> In\u00a0[9]: Copied! <pre>result == True\n</pre> result == True Out[9]: <pre>True</pre> In\u00a0[10]: Copied! <pre>result is True #check something true or not\n</pre> result is True #check something true or not Out[10]: <pre>True</pre> In\u00a0[11]: Copied! <pre>car = 'BMW' #assign value to variable\ncar == 'bmw' #case sensitive\n</pre> car = 'BMW' #assign value to variable car == 'bmw' #case sensitive Out[11]: <pre>False</pre> In\u00a0[12]: Copied! <pre>car = 'Audi'\ncar == 'audi'\n</pre> car = 'Audi' car == 'audi' Out[12]: <pre>False</pre> <p>If case matters, this behavior is advantageous. But if case doesn\u2019t matter and instead you just want to test the value of a variable, you can convert the variable\u2019s value to lowercase before doing the comparison:</p> In\u00a0[13]: Copied! <pre>car.lower()== 'audi'\n</pre> car.lower()== 'audi' Out[13]: <pre>True</pre> In\u00a0[14]: Copied! <pre>car.lower()== 'audi'.upper #demo, only need to change one side\n</pre> car.lower()== 'audi'.upper #demo, only need to change one side Out[14]: <pre>False</pre> <p>Websites enforce certain rules for the data that users enter in a manner similar to this. For example, a site might use a conditional test like this to ensure that every user has a truly unique username, not just a variation on the capitalization of another person\u2019s username. When someone submits a new username, that new username is converted to lowercase and compared to the lowercase versions of all existing usernames. During this check, a username like 'John' will be rejected if any variation of 'john' is already in use.</p> In\u00a0[3]: Copied! <pre>request ='mushroom'\nif request != 'sugar':\n    print('Hold on until further notice')\n</pre> request ='mushroom' if request != 'sugar':     print('Hold on until further notice') <pre>Hold on until further notice\n</pre> In\u00a0[4]: Copied! <pre>age = 18\nage == 18\n</pre> age = 18 age == 18  Out[4]: <pre>True</pre> In\u00a0[5]: Copied! <pre>answer = 17\nif answer != 42:\n    print('This not the right answer. Please try again!')\n</pre> answer = 17 if answer != 42:     print('This not the right answer. Please try again!') <pre>This not the right answer. Please try again!\n</pre> <p>You can include various mathematical comparisons in your conditional statements as well, such as less than, less than or equal to, greater than, and greater than or equal to:</p> In\u00a0[6]: Copied! <pre>age = 19\nage &lt; 21\n</pre> age = 19 age &lt; 21 Out[6]: <pre>True</pre> In\u00a0[7]: Copied! <pre>age&lt;= 21\n</pre> age&lt;= 21 Out[7]: <pre>True</pre> In\u00a0[8]: Copied! <pre>age&gt;=21\n</pre> age&gt;=21 Out[8]: <pre>False</pre> In\u00a0[9]: Copied! <pre>age&gt; 21\n</pre> age&gt; 21 Out[9]: <pre>False</pre> In\u00a0[10]: Copied! <pre>age&lt;21\n</pre> age&lt;21 Out[10]: <pre>True</pre> In\u00a0[11]: Copied! <pre>result = True\n</pre> result = True In\u00a0[12]: Copied! <pre>result is True\n</pre> result is True Out[12]: <pre>True</pre> In\u00a0[13]: Copied! <pre>a = 22\nb = 18\na &gt;= 21 and b&gt;=21 #need to fulfill all conditions\n</pre> a = 22 b = 18 a &gt;= 21 and b&gt;=21 #need to fulfill all conditions Out[13]: <pre>False</pre> In\u00a0[14]: Copied! <pre># example\nmajor = 'geography'\nGPA = 3.91\nif major=='geography' and GPA &gt;= 3.8:\n    print('You can get a scholarship from Geography department.')\n</pre> # example major = 'geography' GPA = 3.91 if major=='geography' and GPA &gt;= 3.8:     print('You can get a scholarship from Geography department.') <pre>You can get a scholarship from Geography department.\n</pre> In\u00a0[15]: Copied! <pre>b = 40\na &gt;= 21 and b&gt;=21 #need to fulfill all conditions, find the first false\n#check the condition for first one, if its already false, the python program \n# will do not check the second one.\n</pre> b = 40 a &gt;= 21 and b&gt;=21 #need to fulfill all conditions, find the first false #check the condition for first one, if its already false, the python program  # will do not check the second one. Out[15]: <pre>True</pre> In\u00a0[16]: Copied! <pre>a = 22\nb = 18\na &gt;= 21 or b&gt;=21 #need to find the first true\n</pre> a = 22 b = 18 a &gt;= 21 or b&gt;=21 #need to find the first true Out[16]: <pre>True</pre> <p>To improve readability, you can use parentheses around the individual tests, but they are not required. If you use parentheses, your test would look like this:</p> In\u00a0[18]: Copied! <pre>(a &gt;= 21) and (b &gt;= 21)\n</pre> (a &gt;= 21) and (b &gt;= 21) Out[18]: <pre>False</pre> In\u00a0[20]: Copied! <pre>c=19\na&gt;=21 and b&gt;=21 and c&gt;=21\n</pre> c=19 a&gt;=21 and b&gt;=21 and c&gt;=21 Out[20]: <pre>False</pre> In\u00a0[26]: Copied! <pre>a&gt;=21 and b&gt;=21 or c&gt;=18\n</pre> a&gt;=21 and b&gt;=21 or c&gt;=18 Out[26]: <pre>True</pre> In\u00a0[24]: Copied! <pre>a&gt;=21 and (b&gt;=21 or c&gt;=18) # change the execute sequence\n</pre> a&gt;=21 and (b&gt;=21 or c&gt;=18) # change the execute sequence Out[24]: <pre>True</pre> In\u00a0[19]: Copied! <pre>a &gt;= 21 or b&gt;=21\n</pre> a &gt;= 21 or b&gt;=21 Out[19]: <pre>True</pre> In\u00a0[30]: Copied! <pre>request = ['onion', 'apple', 'pear', 123] \n'onion' in request # just check if something in the list\n</pre> request = ['onion', 'apple', 'pear', 123]  'onion' in request # just check if something in the list Out[30]: <pre>True</pre> In\u00a0[28]: Copied! <pre>'peach' in request\n</pre> 'peach' in request Out[28]: <pre>False</pre> In\u00a0[29]: Copied! <pre>a = 'onion'\na in request\n</pre> a = 'onion' a in request Out[29]: <pre>True</pre> In\u00a0[31]: Copied! <pre>123 in request # can check number, text, anything within list\n</pre> 123 in request # can check number, text, anything within list Out[31]: <pre>True</pre> In\u00a0[33]: Copied! <pre>user_bank = ['Eric', 'Deng', 'Emily']\nuser = 'Hsu'\nif user not in user_bank:\n    print(f\"{user.title()}, you cannot post anything before register.\")\n</pre> user_bank = ['Eric', 'Deng', 'Emily'] user = 'Hsu' if user not in user_bank:     print(f\"{user.title()}, you cannot post anything before register.\") <pre>Hsu, you cannot post anything before register.\n</pre> In\u00a0[34]: Copied! <pre>#Boolean only have two outcome True or False, no anything in between.\n</pre> #Boolean only have two outcome True or False, no anything in between. In\u00a0[35]: Copied! <pre>age = 19\nif age &gt;= 18:\n    print('You are old enough to vote.')\n</pre> age = 19 if age &gt;= 18:     print('You are old enough to vote.') <pre>You are old enough to vote.\n</pre> In\u00a0[36]: Copied! <pre>age = 17\nif age &gt;= 18: #if condition doesn't meet, it will be done.\n    print('You are old enough to vote.')\n</pre> age = 17 if age &gt;= 18: #if condition doesn't meet, it will be done.     print('You are old enough to vote.') In\u00a0[37]: Copied! <pre>age = 17\nif age &gt;= 18: #if condition doesn't meet, it will be done.\n    print('You are old enough to vote.')# indetation\nprint('haha')\n</pre> age = 17 if age &gt;= 18: #if condition doesn't meet, it will be done.     print('You are old enough to vote.')# indetation print('haha') <pre>haha\n</pre> <p>Indentation plays the same role in if statements as it did in for loops. All indented lines after an if statement will be executed if the test passes, and the entire block of indented lines will be ignored if the test does not pass.</p> <p>You can have as many lines of code as you want in the block following the if statement. Let\u2019s add another line of output if the person is old enough to vote, asking if the individual has registered to vote yet:</p> In\u00a0[38]: Copied! <pre>age = 17\nif age &gt;= 18: #if condition doesn't meet, it will be done.\n    print('You are old enough to vote.')# indetation\n    print('haha')\n</pre> age = 17 if age &gt;= 18: #if condition doesn't meet, it will be done.     print('You are old enough to vote.')# indetation     print('haha') In\u00a0[39]: Copied! <pre>age = 19\nif age &gt;= 18:\n    print('You are old enough to vote.')\n    print('Have you registered to vote yet?')\n</pre> age = 19 if age &gt;= 18:     print('You are old enough to vote.')     print('Have you registered to vote yet?') <pre>You are old enough to vote.\nHave you registered to vote yet?\n</pre> In\u00a0[40]: Copied! <pre>age = 17\nif age &gt;= 18:\n    print(\"You are old enough to vote.\")\n    print('Have you registered to vote yet?')\nelse:\n    print('Sorry, you are not enough to vote.')\n    print('Please register to vote as soon as you become 18!')\n</pre> age = 17 if age &gt;= 18:     print(\"You are old enough to vote.\")     print('Have you registered to vote yet?') else:     print('Sorry, you are not enough to vote.')     print('Please register to vote as soon as you become 18!') <pre>Sorry, you are not enough to vote.\nPlease register to vote as soon as you become 18!\n</pre> In\u00a0[41]: Copied! <pre>age = 19\nif age &gt;= 18:\n    print(\"You are old enough to vote.\")\n    print('Have you registered to vote yet?')\nelse:\n    print('Sorry, you are not enough to vote.')\n    print('Please register to vote as soon as you become 18!')\n</pre> age = 19 if age &gt;= 18:     print(\"You are old enough to vote.\")     print('Have you registered to vote yet?') else:     print('Sorry, you are not enough to vote.')     print('Please register to vote as soon as you become 18!') <pre>You are old enough to vote.\nHave you registered to vote yet?\n</pre> In\u00a0[42]: Copied! <pre>age = 12\nif age &lt; 4:\n    price = 0\nelif age &lt; 18:\n    price = 25\nelif age &lt; 65:\n    price = 60\nelif age &gt;= 65:\n    price = 10\nprint(f\"Your admission cost is $ {price}.\")\n</pre> age = 12 if age &lt; 4:     price = 0 elif age &lt; 18:     price = 25 elif age &lt; 65:     price = 60 elif age &gt;= 65:     price = 10 print(f\"Your admission cost is $ {price}.\") <pre>Your admission cost is $ 25.\n</pre> In\u00a0[43]: Copied! <pre># only can have one else, but many elif\nage = 12\nif age &lt; 4:\n    price = 0\nelif age &lt; 18:\n    price = 25\nelif age &lt; 65:\n    price = 60\nelif age &gt;= 65:\n    price = 10\nelse: #meaningless, will never be execute\n    price = 1000\nprint(f\"Your admission cost is $ {price}.\")\n</pre> # only can have one else, but many elif age = 12 if age &lt; 4:     price = 0 elif age &lt; 18:     price = 25 elif age &lt; 65:     price = 60 elif age &gt;= 65:     price = 10 else: #meaningless, will never be execute     price = 1000 print(f\"Your admission cost is $ {price}.\") <pre>Your admission cost is $ 25.\n</pre> In\u00a0[44]: Copied! <pre># only can have one else, but many elif\nage = 120\nif age &lt; 4:\n    price = 0\nelif age &lt; 18:\n    price = 25\nelif age &lt; 65:\n    price = 60\nelif age &lt; 100:\n    price = 10\nelse: #meaningful, because the above schema doesn't cover all the possibility\n    price = -10\nprint(f\"Your admission cost is $ {price}.\")\n</pre> # only can have one else, but many elif age = 120 if age &lt; 4:     price = 0 elif age &lt; 18:     price = 25 elif age &lt; 65:     price = 60 elif age &lt; 100:     price = 10 else: #meaningful, because the above schema doesn't cover all the possibility     price = -10 print(f\"Your admission cost is $ {price}.\") <pre>Your admission cost is $ -10.\n</pre> <p>The else block is a catchall statement. It matches any condition that wasn\u2019t matched by a specific if or elif test, and that can sometimes include invalid or even malicious data. If you have a specific final condition you are testing for, consider using a final elif block and omit the else block. As a result, you\u2019ll gain extra confidence that your code will run only under the correct conditions.</p> In\u00a0[1]: Copied! <pre>request = ['beef', 'cheese']\nif 'beef' in request:\n    print('adding beef.')\nif 'mushroom' in request:\n    print('adding mushroom')\nif 'cheese' in request:\n    print('adding more cheese.')\nprint(\"finished makeing your pizza!\")\n</pre> request = ['beef', 'cheese'] if 'beef' in request:     print('adding beef.') if 'mushroom' in request:     print('adding mushroom') if 'cheese' in request:     print('adding more cheese.') print(\"finished makeing your pizza!\") <pre>adding beef.\nadding more cheese.\nfinished makeing your pizza!\n</pre> In\u00a0[2]: Copied! <pre>#not work well with elif, because elif only process if first if doesn't work\nif 'beef' in request:\n    print('adding beef.')\nelif 'mushroom' in request:\n    print('adding mushroom')\nelif 'cheese' in request:\n    print('adding more cheese.')\nprint(\"finished makeing your pizza!\")\n</pre> #not work well with elif, because elif only process if first if doesn't work if 'beef' in request:     print('adding beef.') elif 'mushroom' in request:     print('adding mushroom') elif 'cheese' in request:     print('adding more cheese.') print(\"finished makeing your pizza!\") <pre>adding beef.\nfinished makeing your pizza!\n</pre> In\u00a0[4]: Copied! <pre>if 'mushroom' in request:\n    print('adding mushroom.')\nelif 'beef' in request:\n    print('adding beef.')\nelif 'cheese' in request:\n    print('adding more cheese.')\nprint(\"finished makeing your pizza!\")\n</pre> if 'mushroom' in request:     print('adding mushroom.') elif 'beef' in request:     print('adding beef.') elif 'cheese' in request:     print('adding more cheese.') print(\"finished makeing your pizza!\") <pre>adding beef.\nfinished makeing your pizza!\n</pre> <p>In summary, if you want only one block of code to run, use an if-elif-else chain. If more than one block of code needs to run, use a series of independent if statements.</p> In\u00a0[6]: Copied! <pre>request = ['beef', 'cheese','mushrooms']\nfor a in request:\n    print(f\"adding {a}.\")\nprint(\"finished making your pizza.\")\n</pre> request = ['beef', 'cheese','mushrooms'] for a in request:     print(f\"adding {a}.\") print(\"finished making your pizza.\") <pre>adding beef.\nadding cheese.\nadding mushrooms.\nfinished making your pizza.\n</pre> <p>The output is straightforward because this code is just a simple for loop. But what if the pizzeria runs out of green peppers? An if statement inside the for loop can handle this situation appropriately:</p> In\u00a0[8]: Copied! <pre>for a in request:\n    if a =='beef':\n        print(\"Sorry, we are out of beef right now.\")\n    else:\n        print(f\"adding {a}.\")\nprint(\"finishing making your pizza.\")\n</pre> for a in request:     if a =='beef':         print(\"Sorry, we are out of beef right now.\")     else:         print(f\"adding {a}.\") print(\"finishing making your pizza.\") <pre>Sorry, we are out of beef right now.\nadding cheese.\nadding mushrooms.\nfinishing making your pizza.\n</pre> In\u00a0[11]: Copied! <pre>a = []\nif a:\n    for b in a:\n        print(f\"adding{b}.\")\n    print(\"finished making your pizza.\")\nelse:\n    print(\"Are you want a plain pizza?\")\n</pre> a = [] if a:     for b in a:         print(f\"adding{b}.\")     print(\"finished making your pizza.\") else:     print(\"Are you want a plain pizza?\") <pre>Are you want a plain pizza?\n</pre> In\u00a0[14]: Copied! <pre>a = ['beef','mushroom']\nif a:\n    for b in a:\n        print(f\"adding {b}.\")\n    print(\"finished making your pizza.\")\nelse:\n    print(\"Are you want a plain pizza?\")\n</pre> a = ['beef','mushroom'] if a:     for b in a:         print(f\"adding {b}.\")     print(\"finished making your pizza.\") else:     print(\"Are you want a plain pizza?\") <pre>adding beef.\nadding mushroom.\nfinished making your pizza.\n</pre> In\u00a0[15]: Copied! <pre>available = ['mushrooms', 'olives', 'green peppers','extra cheese']\n\nrequested = ['mushrooms', 'french fries', 'extra cheese']\n\nfor requested_topping in requested:\n    if requested_topping in available:\n        print(f\"Adding {requested_topping}.\")\n    else:\n        print(f\"Sorry, we don't have {requested_topping}.\")\n\nprint(\"\\nFinished making your pizza!\")\n</pre> available = ['mushrooms', 'olives', 'green peppers','extra cheese']  requested = ['mushrooms', 'french fries', 'extra cheese']  for requested_topping in requested:     if requested_topping in available:         print(f\"Adding {requested_topping}.\")     else:         print(f\"Sorry, we don't have {requested_topping}.\")  print(\"\\nFinished making your pizza!\") <pre>Adding mushrooms.\nSorry, we don't have french fries.\nAdding extra cheese.\n\nFinished making your pizza!\n</pre>"},{"location":"python/Conditional_statement/#conditional-statements","title":"Conditional Statements\u00b6","text":"<p>Programming often involves examining a set of conditions and deciding which action to take based on those conditions. Python\u2019s if statement allows you to examine the current state of a program and respond appropriately to that state.</p> <p>In this lecture you\u2019ll learn to write conditional tests, which allow you to check any condition of interest. You\u2019ll learn to write simple if statements, and you\u2019ll learn how to create a more complex series of if statements to identify when the exact conditions you want are present. You\u2019ll then apply this concept to lists, so you\u2019ll be able to write a for loop that handles most items in a list one way but handles certain items with specific values in a different way.</p>"},{"location":"python/Conditional_statement/#a-simple-example","title":"A SIMPLE EXAMPLE\u00b6","text":"<p>The following short example shows how if tests let you respond to special situations correctly. Imagine you have a list of cars and you want to print out the name of each car. Car names are proper names, so the names of most cars should be printed in title case. However, the value 'bmw' should be printed in all uppercase. The following code loops through a list of car names and looks for the value 'bmw'. Whenever the value is 'bmw', it\u2019s printed in uppercase instead of title case:</p>"},{"location":"python/Conditional_statement/#additional-exercise","title":"Additional exercise\u00b6","text":""},{"location":"python/Conditional_statement/#conditional-tests","title":"CONDITIONAL TESTS\u00b6","text":"<p>At the heart of every if statement is an expression that can be evaluated as True or False and is called a conditional test. Python uses the values True and False to decide whether the code in an if statement should be executed. If a conditional test evaluates to True, Python executes the code following the if statement. If the test evaluates to False, Python ignores the code following the if statement.</p>"},{"location":"python/Conditional_statement/#checking-for-equality","title":"Checking for Equality\u00b6","text":"<p>Most conditional tests compare the current value of a variable to a specific value of interest. The simplest conditional test checks whether the value of a variable is equal to the value of interest:</p>"},{"location":"python/Conditional_statement/#ignoring-case-when-checking-for-equality","title":"Ignoring Case When Checking for Equality\u00b6","text":"<p>Testing for equality is case sensitive in Python. For example, two values with different capitalization are not considered equal:</p>"},{"location":"python/Conditional_statement/#checking-for-inequality","title":"Checking for Inequality\u00b6","text":"<p>When you want to determine whether two values are not equal, you can combine an exclamation point and an equal sign (!=). The exclamation point represents not, as it does in many programming languages.</p> <p>Let\u2019s use another if statement to examine how to use the inequality operator. We\u2019ll store a requested pizza topping in a variable and then print a message if the person did not order anchovies:</p>"},{"location":"python/Conditional_statement/#numerical-comparisons","title":"Numerical Comparisons\u00b6","text":"<p>Testing numerical values is pretty straightforward.</p>"},{"location":"python/Conditional_statement/#checking-multiple-conditions","title":"Checking Multiple Conditions\u00b6","text":"<p>You may want to check multiple conditions at the same time. For example, sometimes you might need two conditions to be True to take an action. Other times you might be satisfied with just one condition being True. The keywords and and or can help you in these situations.</p>"},{"location":"python/Conditional_statement/#using-and-to-check-multiple-conditions","title":"Using and to Check Multiple Conditions\u00b6","text":"<p>To check whether two conditions are both True simultaneously, use the keyword and to combine the two conditional tests; if each test passes, the overall expression evaluates to True. If either test fails or if both tests fail, the expression evaluates to False.</p>"},{"location":"python/Conditional_statement/#using-or-to-check-multiple-conditions","title":"Using or to Check Multiple Conditions\u00b6","text":"<p>The keyword or allows you to check multiple conditions as well, but it passes when either or both of the individual tests pass. An or expression fails only when both individual tests fail.</p>"},{"location":"python/Conditional_statement/#checking-whether-a-value-is-in-a-list","title":"Checking Whether a Value Is in a List\u00b6","text":"<p>Sometimes it\u2019s important to check whether a list contains a certain value before taking an action. For example, you might want to check whether a new username already exists in a list of current usernames before completing someone\u2019s registration on a website. In a mapping project, you might want to check whether a submitted location already exists in a list of known locations.</p> <p>To find out whether a particular value is already in a list, use the keyword in. Let\u2019s consider some code you might write for a pizzeria. We\u2019ll make a list of toppings a customer has requested for a pizza and then check whether certain toppings are in the list.</p>"},{"location":"python/Conditional_statement/#checking-whether-a-value-is-not-in-a-list","title":"Checking Whether a Value Is Not in a List\u00b6","text":"<p>Other times, it\u2019s important to know if a value does not appear in a list. You can use the keyword not in this situation. For example, consider a list of users who are banned from commenting in a forum. You can check whether a user has been banned before allowing that person to submit a comment:</p>"},{"location":"python/Conditional_statement/#boolean-expressions","title":"Boolean Expressions\u00b6","text":"<p>As you learn more about programming, you\u2019ll hear the term Boolean expression at some point. A Boolean expression is just another name for a conditional test. A Boolean value is either True or False, just like the value of a conditional expression after it has been evaluated.</p> <p>Boolean values are often used to keep track of certain conditions, such as whether a game is running or whether a user can edit certain content on a website:</p>"},{"location":"python/Conditional_statement/#if-statements","title":"IF STATEMENTS\u00b6","text":"<p>When you understand conditional tests, you can start writing if statements. Several different kinds of if statements exist, and your choice of which to use depends on the number of conditions you need to test. You saw several examples of if statements in the discussion about conditional tests, but now let\u2019s dig deeper into the topic.</p>"},{"location":"python/Conditional_statement/#simple-if-statements","title":"Simple if Statements\u00b6","text":"<p>The simplest kind of if statement has one test and one action:</p> <pre><code>if conditional_test:\n\u00a0\u00a0\u00a0\u00a0do something\n</code></pre> <p>You can put any conditional test in the first line and just about any action in the indented block following the test. If the conditional test evaluates to True, Python executes the code following the if statement. If the test evaluates to False, Python ignores the code following the if statement.</p> <p>Let\u2019s say we have a variable representing a person\u2019s age, and we want to know if that person is old enough to vote. The following code tests whether the person can vote:</p>"},{"location":"python/Conditional_statement/#if-else-statements","title":"if-else Statements\u00b6","text":"<p>Often, you\u2019ll want to take one action when a conditional test passes and a different action in all other cases. Python\u2019s if-else syntax makes this possible. An if-else block is similar to a simple if statement, but the else statement allows you to define an action or set of actions that are executed when the conditional test fails.</p> <p>We\u2019ll display the same message we had previously if the person is old enough to vote, but this time we\u2019ll add a message for anyone who is not old enough to vote:</p>"},{"location":"python/Conditional_statement/#the-if-elif-else-chain","title":"The if-elif-else Chain\u00b6","text":"<p>Often, you\u2019ll need to test more than two possible situations, and to evaluate these you can use Python\u2019s if-elif-else syntax. Python executes only one block in an if-elif-else chain. It runs each conditional test in order until one passes. When a test passes, the code following that test is executed and Python skips the rest of the tests.</p> <p>Many real-world situations involve more than two possible conditions. For example, consider an amusement park that charges different rates for different age groups:</p> <ul> <li>Admission for anyone under age 4 is free.</li> <li>Admission for anyone between the ages of 4 and 18 is $25.</li> <li>Admission for anyone age 18 or older is $60.</li> <li>Admission for anyone age older than 65 is $10</li> </ul> <p>How can we use an if statement to determine a person\u2019s admission rate? The following code tests for the age group of a person and then prints an admission price message:</p>"},{"location":"python/Conditional_statement/#testing-multiple-conditions","title":"Testing Multiple Conditions\u00b6","text":"<p>The if-elif-else chain is powerful, but it\u2019s only appropriate to use when you just need one test to pass. As soon as Python finds one test that passes, it skips the rest of the tests. This behavior is beneficial, because it\u2019s efficient and allows you to test for one specific condition.</p> <p>However, sometimes it\u2019s important to check all of the conditions of interest. In this case, you should use a series of simple if statements with no elif or else blocks. This technique makes sense when more than one condition could be True, and you want to act on every condition that is True.</p> <p>Let\u2019s reconsider the pizzeria example. If someone requests a two-topping pizza, you\u2019ll need to be sure to include both toppings on their pizza:</p>"},{"location":"python/Conditional_statement/#using-if-statements-with-lists","title":"USING IF STATEMENTS WITH LISTS\u00b6","text":"<p>You can do some interesting work when you combine lists and if statements. You can watch for special values that need to be treated differently than other values in the list. You can manage changing conditions efficiently, such as the availability of certain items in a restaurant throughout a shift. You can also begin to prove that your code works as you expect it to in all possible situations.</p>"},{"location":"python/Conditional_statement/#checking-for-special-items","title":"Checking for Special Items\u00b6","text":"<p>This lecture began with a simple example that showed how to handle a special value like 'bmw', which needed to be printed in a different format than other values in the list. Now that you have a basic understanding of conditional tests and if statements, let\u2019s take a closer look at how you can watch for special values in a list and handle those values appropriately.</p> <p>Let\u2019s continue with the pizzeria example. The pizzeria displays a message whenever a topping is added to your pizza, as it\u2019s being made. The code for this action can be written very efficiently by making a list of toppings the customer has requested and using a loop to announce each topping as it\u2019s added to the pizza:</p>"},{"location":"python/Conditional_statement/#checking-that-a-list-is-not-empty","title":"Checking That a List Is Not Empty\u00b6","text":"<p>We\u2019ve made a simple assumption about every list we\u2019ve worked with so far; we\u2019ve assumed that each list has at least one item in it. Soon we\u2019ll let users provide the information that\u2019s stored in a list, so we won\u2019t be able to assume that a list has any items in it each time a loop is run. In this situation, it\u2019s useful to check whether a list is empty before running a for loop.</p> <p>As an example, let\u2019s check whether the list of requested toppings is empty before building the pizza. If the list is empty, we\u2019ll prompt the user and make sure they want a plain pizza. If the list is not empty, we\u2019ll build the pizza just as we did in the previous examples:</p>"},{"location":"python/Conditional_statement/#using-multiple-lists","title":"Using Multiple Lists\u00b6","text":"<p>People will ask for just about anything, especially when it comes to pizza toppings. What if a customer actually wants french fries on their pizza? You can use lists and if statements to make sure your input makes sense before you act on it.</p> <p>Let\u2019s watch out for unusual topping requests before we build a pizza. The following example defines two lists. The first is a list of available toppings at the pizzeria, and the second is the list of toppings that the user has requested. This time, each item in requested_toppings is checked against the list of available toppings before it\u2019s added to the pizza:</p>"},{"location":"python/Conditional_statement/#styling-your-if-statements","title":"STYLING YOUR IF STATEMENTS\u00b6","text":"<p>In every example in this chapter, you\u2019ve seen good styling habits. The only recommendation PEP 8 provides for styling conditional tests is to use a single space around comparison operators, such as ==, &gt;=, &lt;=. For example:</p> <pre><code>if age &lt; 4:\n</code></pre> <p>is better than:</p> <pre><code>if age&lt;4:\n</code></pre> <p>Such spacing does not affect the way Python interprets your code; it just makes your code easier for you and others to read.</p>"},{"location":"python/Conditional_statement/#summary","title":"SUMMARY\u00b6","text":"<p>In this chapter you learned how to write conditional tests, which always evaluate to True or False. You learned to write simple if statements, if-else chains, and if-elif-else chains. You began using these structures to identify particular conditions you needed to test and to know when those conditions have been met in your programs. You learned to handle certain items in a list differently than all other items while continuing to utilize the efficiency of a for loop. You also revisited Python\u2019s style recommendations to ensure that your increasingly complex programs are still relatively easy to read and understand.</p>"},{"location":"python/Conditional_statement/#finished","title":"Finished\u00b6","text":""},{"location":"python/Conditional_statement/#references","title":"References\u00b6","text":"<ul> <li>Matthes, Eric (2022). Python Crash Course, 3rd Edition: A Hands-On, Project-Based Introduction to Programming. No Starch Press. ISBN: 978-1593279288. (Publisher website)</li> <li>Dr.Qiusheng Wu online lecture</li> </ul>"},{"location":"python/Dictionaries/","title":"Coverts Tuple to List","text":"In\u00a0[1]: Copied! <pre>test =('hann', 'matt', 'Eriv')\ntest\n</pre> test =('hann', 'matt', 'Eriv') test Out[1]: <pre>('hann', 'matt', 'Eriv')</pre> In\u00a0[3]: Copied! <pre>tests= list(test)\ntests\n</pre> tests= list(test) tests Out[3]: <pre>['hann', 'matt', 'Eriv']</pre> In\u00a0[6]: Copied! <pre>students= {\n    'wyu':'faculty',\n    'zyang':'faculty',\n    'wma999':'student',\n    'lwill':'staff'\n}\n</pre> students= {     'wyu':'faculty',     'zyang':'faculty',     'wma999':'student',     'lwill':'staff' } In\u00a0[5]: Copied! <pre>students['wyu']\n</pre> students['wyu'] Out[5]: <pre>'faculty'</pre> In\u00a0[6]: Copied! <pre>students['wma999']\n</pre> students['wma999'] Out[6]: <pre>'student'</pre> In\u00a0[7]: Copied! <pre>students['zyang']= 'student' #make changes\nstudents\n</pre> students['zyang']= 'student' #make changes students Out[7]: <pre>{'wyu': 'faculty', 'zyang': 'student', 'wma999': 'student', 'lwill': 'staff'}</pre> In\u00a0[8]: Copied! <pre># looking for how many item within the list\nlen(students)\n</pre> # looking for how many item within the list len(students)  Out[8]: <pre>4</pre> In\u00a0[9]: Copied! <pre>#added new item in the list\nstudents['luke45']= 'student' \nstudents\n</pre> #added new item in the list students['luke45']= 'student'  students Out[9]: <pre>{'wyu': 'faculty',\n 'zyang': 'student',\n 'wma999': 'student',\n 'lwill': 'staff',\n 'luke45': 'student'}</pre> In\u00a0[11]: Copied! <pre>#delete an item from the list\ndel students['wma999']\nstudents\n</pre> #delete an item from the list del students['wma999'] students Out[11]: <pre>{'wyu': 'faculty', 'zyang': 'student', 'lwill': 'staff', 'luke45': 'student'}</pre> In\u00a0[12]: Copied! <pre># looking for key item in the dictionaries\nstudents.keys()\n</pre> # looking for key item in the dictionaries students.keys() Out[12]: <pre>dict_keys(['wyu', 'zyang', 'lwill', 'luke45'])</pre> In\u00a0[13]: Copied! <pre># looking for values \nstudents.values()\n</pre> # looking for values  students.values() Out[13]: <pre>dict_values(['faculty', 'student', 'staff', 'student'])</pre> In\u00a0[14]: Copied! <pre># looking for key and correspond values, return as a list\nstudents.items()\n</pre> # looking for key and correspond values, return as a list students.items() Out[14]: <pre>dict_items([('wyu', 'faculty'), ('zyang', 'student'), ('lwill', 'staff'), ('luke45', 'student')])</pre> In\u00a0[16]: Copied! <pre>for student in students.keys():\n    students[student]=students[student].title()\nstudents\n</pre> for student in students.keys():     students[student]=students[student].title() students Out[16]: <pre>{'wyu': 'Faculty', 'zyang': 'Student', 'lwill': 'Staff', 'luke45': 'Student'}</pre> In\u00a0[17]: Copied! <pre>for student in students: #looping through the key\n    students[student]=students[student].title()\nstudents\n</pre> for student in students: #looping through the key     students[student]=students[student].title() students Out[17]: <pre>{'wyu': 'Faculty', 'zyang': 'Student', 'lwill': 'Staff', 'luke45': 'Student'}</pre> In\u00a0[22]: Copied! <pre>students= {\n    'wyu':'faculty',\n    'zyang':'faculty',\n    'wma999':'student',\n    'lwill':'staff'\n}\n</pre> students= {     'wyu':'faculty',     'zyang':'faculty',     'wma999':'student',     'lwill':'staff' } In\u00a0[21]: Copied! <pre>for key, value in students.items():\n    students[key]= value.title()\nstudents\n</pre> for key, value in students.items():     students[key]= value.title() students Out[21]: <pre>{'wyu': 'Binghamton Binghamtonfaculty',\n 'zyang': 'Binghamton Binghamtonstudent',\n 'lwill': 'Binghamton Binghamtonstaff',\n 'luke45': 'Binghamton Binghamtonstudent'}</pre> In\u00a0[23]: Copied! <pre>for key, value in students.items():\n     students[key]= \"Binghamton \" + value.title()\nstudents\n</pre> for key, value in students.items():      students[key]= \"Binghamton \" + value.title() students Out[23]: <pre>{'wyu': 'Binghamton Faculty',\n 'zyang': 'Binghamton Faculty',\n 'wma999': 'Binghamton Student',\n 'lwill': 'Binghamton Staff'}</pre> In\u00a0[25]: Copied! <pre>employees = {}\n</pre> employees = {} In\u00a0[26]: Copied! <pre>employees['zyang99']='staff'\nemployees\n</pre> employees['zyang99']='staff' employees Out[26]: <pre>{'zyang99': 'staff'}</pre> In\u00a0[1]: Copied! <pre>gpa = {\n    'chen':3.8, \n    'liu': 3.7, \n    'Eric':4,\n    'Wan':4.0\n}\ngpa\n</pre> gpa = {     'chen':3.8,      'liu': 3.7,      'Eric':4,     'Wan':4.0 } gpa Out[1]: <pre>{'chen': 3.8, 'liu': 3.7, 'Eric': 4, 'Wan': 4.0}</pre> In\u00a0[4]: Copied! <pre>gpa['liu']\n</pre> gpa['liu'] Out[4]: <pre>3.7</pre> In\u00a0[27]: Copied! <pre>alien_0 = {'x_position': 0, 'y_position': 25, 'speed': 'medium'}\nprint(f\"Original position: {alien_0['x_position']}\")\n\n# Move the alien to the right.\n# Determine how far to move the alien based on its current speed.\nif alien_0['speed'] == 'slow':\n    x_increment = 1\nelif alien_0['speed'] == 'medium':\n    x_increment = 2\nelse:\n    # This must be a fast alien.\n    x_increment = 3\n\n# The new position is the old position plus the increment.\nalien_0['x_position'] = alien_0['x_position'] + x_increment\n\nprint(f\"New position: {alien_0['x_position']}\")\n</pre> alien_0 = {'x_position': 0, 'y_position': 25, 'speed': 'medium'} print(f\"Original position: {alien_0['x_position']}\")  # Move the alien to the right. # Determine how far to move the alien based on its current speed. if alien_0['speed'] == 'slow':     x_increment = 1 elif alien_0['speed'] == 'medium':     x_increment = 2 else:     # This must be a fast alien.     x_increment = 3  # The new position is the old position plus the increment. alien_0['x_position'] = alien_0['x_position'] + x_increment  print(f\"New position: {alien_0['x_position']}\") <pre>Original position: 0\nNew position: 2\n</pre> In\u00a0[28]: Copied! <pre>user_0 = {\n    'username': 'efermi',\n    'first': 'enrico',\n    'last': 'fermi',\n    }\n\nfor key, value in user_0.items():\n    print(f\"\\nKey: {key}\")\n    print(f\"Value: {value}\")\n</pre> user_0 = {     'username': 'efermi',     'first': 'enrico',     'last': 'fermi',     }  for key, value in user_0.items():     print(f\"\\nKey: {key}\")     print(f\"Value: {value}\") <pre>\nKey: username\nValue: efermi\n\nKey: first\nValue: enrico\n\nKey: last\nValue: fermi\n</pre> <p>As shown above, to write a for loop for a dictionary, you create names for the two variables that will hold the key and value in each key-value pair. You can choose any names you want for these two variables. This code would work just as well if you had used abbreviations for the variable names, like this:</p> <p><code>for k, v in user_0.items()</code></p> In\u00a0[29]: Copied! <pre>favorite_languages = {\n    'jen': 'python',\n    'sarah': 'c',\n    'edward': 'ruby',\n    'phil': 'python',\n    }\n\nfor name in favorite_languages.keys():\n    print(name.title())\n</pre> favorite_languages = {     'jen': 'python',     'sarah': 'c',     'edward': 'ruby',     'phil': 'python',     }  for name in favorite_languages.keys():     print(name.title()) <pre>Jen\nSarah\nEdward\nPhil\n</pre> In\u00a0[30]: Copied! <pre>favorite_languages = {\n    'jen': 'python',\n    'sarah': 'c',\n    'edward': 'ruby',\n    'phil': 'python',\n    }\n\nif 'erin' not in favorite_languages.keys(): #same with list\n    print(\"Erin, please take our poll!\")\n</pre> favorite_languages = {     'jen': 'python',     'sarah': 'c',     'edward': 'ruby',     'phil': 'python',     }  if 'erin' not in favorite_languages.keys(): #same with list     print(\"Erin, please take our poll!\") <pre>Erin, please take our poll!\n</pre> In\u00a0[31]: Copied! <pre>favorite_languages = {\n    'jen': 'python',\n    'sarah': 'c',\n    'edward': 'ruby',\n    'phil': 'python',\n    }\n\nfor name in sorted(favorite_languages):\n    print(f\"{name.title()}, thank you for taking the poll.\")\n</pre> favorite_languages = {     'jen': 'python',     'sarah': 'c',     'edward': 'ruby',     'phil': 'python',     }  for name in sorted(favorite_languages):     print(f\"{name.title()}, thank you for taking the poll.\") <pre>Edward, thank you for taking the poll.\nJen, thank you for taking the poll.\nPhil, thank you for taking the poll.\nSarah, thank you for taking the poll.\n</pre> In\u00a0[32]: Copied! <pre>print(\"The following languages have been mentioned:\")\nfor language in favorite_languages.values():\n    print(language.title())\n</pre> print(\"The following languages have been mentioned:\") for language in favorite_languages.values():     print(language.title()) <pre>The following languages have been mentioned:\nPython\nC\nRuby\nPython\n</pre> <p>This approach pulls all the values from the dictionary without checking for repeats. That might work fine with a small number of values, but in a poll with a large number of respondents, this would result in a very repetitive list. To see each language chosen without repetition, we can use a set. A set is a collection in which each item must be unique:</p> In\u00a0[34]: Copied! <pre>print(\"The following languages have been mentioned:\")\nfor language in set(favorite_languages.values()):\n    print(language.title())\n</pre> print(\"The following languages have been mentioned:\") for language in set(favorite_languages.values()):     print(language.title()) <pre>The following languages have been mentioned:\nC\nPython\nRuby\n</pre> <p>When you wrap set() around a list that contains duplicate items, Python identifies the unique items in the list and builds a set from those items. We use set() to pull out the unique languages in favorite_languages.values().</p> In\u00a0[47]: Copied! <pre>alien_0 = {'color': 'green', 'points': 5}\nalien_1 = {'color': 'yellow', 'points': 10}\nalien_2 = {'color': 'red', 'points': 15}\n\naliens = [alien_0, alien_1, alien_2]\n\nfor alien in aliens:\n    print(alien)\n</pre> alien_0 = {'color': 'green', 'points': 5} alien_1 = {'color': 'yellow', 'points': 10} alien_2 = {'color': 'red', 'points': 15}  aliens = [alien_0, alien_1, alien_2]  for alien in aliens:     print(alien) <pre>{'color': 'green', 'points': 5}\n{'color': 'yellow', 'points': 10}\n{'color': 'red', 'points': 15}\n</pre> In\u00a0[48]: Copied! <pre># Make an empty list for storing aliens.\naliens = []\n\n# Make 30 green aliens.\nfor alien_number in range(30):\n    new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}\n    aliens.append(new_alien)\n# Show the first 5 aliens.\nfor alien in aliens[:5]:\n    print(alien)\n    print(\"...\")\n\n# Show how many aliens have been created.\nprint(f\"Total number of aliens: {len(aliens)}\")\n</pre> # Make an empty list for storing aliens. aliens = []  # Make 30 green aliens. for alien_number in range(30):     new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}     aliens.append(new_alien) # Show the first 5 aliens. for alien in aliens[:5]:     print(alien)     print(\"...\")  # Show how many aliens have been created. print(f\"Total number of aliens: {len(aliens)}\") <pre>{'color': 'green', 'points': 5, 'speed': 'slow'}\n...\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n...\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n...\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n...\n{'color': 'green', 'points': 5, 'speed': 'slow'}\n...\nTotal number of aliens: 30\n</pre> <p>It\u2019s common to store a number of dictionaries in a list when each dictionary contains many kinds of information about one object. For example, you might create a dictionary for each user on a website. All of the dictionaries in the list should have an identical structure so you can loop through the list and work with each dictionary object in the same way.</p> In\u00a0[49]: Copied! <pre>avorite_languages = {\n    'jen': ['python', 'ruby'],\n    'sarah': ['c'],\n    'edward': ['ruby', 'go'],\n    'phil': ['python', 'haskell'],\n    }\n\nfor name, languages in favorite_languages.items():\n    print(f\"\\n{name.title()}'s favorite languages are:\")\n    for language in languages:\n        print(f\"\\t{language.title()}\")\n</pre> avorite_languages = {     'jen': ['python', 'ruby'],     'sarah': ['c'],     'edward': ['ruby', 'go'],     'phil': ['python', 'haskell'],     }  for name, languages in favorite_languages.items():     print(f\"\\n{name.title()}'s favorite languages are:\")     for language in languages:         print(f\"\\t{language.title()}\") <pre>\nJen's favorite languages are:\n\tP\n\tY\n\tT\n\tH\n\tO\n\tN\n\nSarah's favorite languages are:\n\tC\n\nEdward's favorite languages are:\n\tR\n\tU\n\tB\n\tY\n\nPhil's favorite languages are:\n\tP\n\tY\n\tT\n\tH\n\tO\n\tN\n</pre> In\u00a0[50]: Copied! <pre>users = {\n    'aeinstein': {\n        'first': 'albert',\n        'last': 'einstein',\n        'location': 'princeton',\n        },\n\n    'mcurie': {\n        'first': 'marie',\n        'last': 'curie',\n        'location': 'paris',\n        },\n\n    }\n\nfor username, user_info in users.items():\n    print(f\"\\nUsername: {username}\")\n    full_name = f\"{user_info['first']} {user_info['last']}\"\n    location = user_info['location']\n\n    print(f\"\\tFull name: {full_name.title()}\")\n    print(f\"\\tLocation: {location.title()}\")\n</pre> users = {     'aeinstein': {         'first': 'albert',         'last': 'einstein',         'location': 'princeton',         },      'mcurie': {         'first': 'marie',         'last': 'curie',         'location': 'paris',         },      }  for username, user_info in users.items():     print(f\"\\nUsername: {username}\")     full_name = f\"{user_info['first']} {user_info['last']}\"     location = user_info['location']      print(f\"\\tFull name: {full_name.title()}\")     print(f\"\\tLocation: {location.title()}\") <pre>\nUsername: aeinstein\n\tFull name: Albert Einstein\n\tLocation: Princeton\n\nUsername: mcurie\n\tFull name: Marie Curie\n\tLocation: Paris\n</pre> In\u00a0[37]: Copied! <pre>students= {\n    'wyu':{'name':'Wanh','type':'faculty','department':'Geography', 'age':18},\n    'zyang':'faculty',\n    'wma999':'student',\n    'lwill':'staff'\n}\nstudents['wyu']['department']\n</pre> students= {     'wyu':{'name':'Wanh','type':'faculty','department':'Geography', 'age':18},     'zyang':'faculty',     'wma999':'student',     'lwill':'staff' } students['wyu']['department'] Out[37]: <pre>'Geography'</pre> In\u00a0[38]: Copied! <pre>students['zyang']['department']\n</pre> students['zyang']['department'] <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[38], line 1\n----&gt; 1 students['zyang']['department']\n\nTypeError: string indices must be integers</pre> In\u00a0[45]: Copied! <pre>students= {\n    'wyu':{'name':'Wanh','type':'faculty','department':'Geography', 'age':18,\n           \"address\":{\n              'street': '4400 Parkway E',\n              'city':'Vestal',\n              'state':'NY',\n              'zip': 13850\n          }},\n    'zyang':['Zhanchao', 'student','envi', 19],\n    'wma999':'student',\n    'lwill':'staff'\n}\nstudents['zyang'][2]\n</pre> students= {     'wyu':{'name':'Wanh','type':'faculty','department':'Geography', 'age':18,            \"address\":{               'street': '4400 Parkway E',               'city':'Vestal',               'state':'NY',               'zip': 13850           }},     'zyang':['Zhanchao', 'student','envi', 19],     'wma999':'student',     'lwill':'staff' } students['zyang'][2] Out[45]: <pre>'envi'</pre> In\u00a0[46]: Copied! <pre>students= {\n    'wyu':{'name':'Wanh','type':'faculty','department':'Geography', 'age':18,\n           \"address\":{\n              'street': '4400 Parkway E',\n              'city':'Vestal',\n              'state':'NY',\n              'zip': 13850\n          }},\n    'zyang':['Zhanchao', 'student','envi', 19],\n    'wma999':'student',\n    'lwill':'staff'\n}\nstudents['wyu'][\"address\"]['zip']\n</pre> students= {     'wyu':{'name':'Wanh','type':'faculty','department':'Geography', 'age':18,            \"address\":{               'street': '4400 Parkway E',               'city':'Vestal',               'state':'NY',               'zip': 13850           }},     'zyang':['Zhanchao', 'student','envi', 19],     'wma999':'student',     'lwill':'staff' } students['wyu'][\"address\"]['zip'] Out[46]: <pre>13850</pre> In\u00a0[54]: Copied! <pre># case sensitive . if doesn't match it will run into error (case sensitive)\nstudents['wyu'][\"address\"]['Zip']\n</pre> # case sensitive . if doesn't match it will run into error (case sensitive) students['wyu'][\"address\"]['Zip'] <pre>\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nCell In[54], line 2\n      1 # case sensitive . if doesn't match it will run into error (case sensitive)\n----&gt; 2 students['wyu'][\"address\"]['Zip']\n\nKeyError: 'Zip'</pre> In\u00a0[55]: Copied! <pre># 'get' function can avoid run into error, but it can be None\nstudents['wyu'][\"address\"].get('Zip')\n</pre> # 'get' function can avoid run into error, but it can be None students['wyu'][\"address\"].get('Zip') In\u00a0[53]: Copied! <pre>students['wyu'][\"address\"].get('Zip') is None\n</pre> students['wyu'][\"address\"].get('Zip') is None Out[53]: <pre>True</pre> In\u00a0[56]: Copied! <pre># allow  computer give users a message if not exisit\nstudents['wyu'][\"address\"].get('Zip', 'This item does not exist in the database')\n</pre> # allow  computer give users a message if not exisit students['wyu'][\"address\"].get('Zip', 'This item does not exist in the database') Out[56]: <pre>'This item does not exist in the database'</pre> In\u00a0[57]: Copied! <pre>students['wyu'][\"address\"].get('zip', 'This item does not exist in the database')\n</pre> students['wyu'][\"address\"].get('zip', 'This item does not exist in the database') Out[57]: <pre>13850</pre>"},{"location":"python/Dictionaries/#coverts-tuple-to-list","title":"Coverts Tuple to List\u00b6","text":""},{"location":"python/Dictionaries/#dictionaries","title":"Dictionaries\u00b6","text":"<p>In this lecture you\u2019ll learn how to use Python\u2019s dictionaries, which allow you to connect pieces of related information. You\u2019ll learn how to access the information once it\u2019s in a dictionary and how to modify that information. Because dictionaries can store an almost limitless amount of information, I\u2019ll show you how to loop through the data in a dictionary. Additionally, you\u2019ll learn to nest dictionaries inside lists, lists inside dictionaries, and even dictionaries inside other dictionaries.</p> <p>Understanding dictionaries allows you to model a variety of real-world objects more accurately. You\u2019ll be able to create a dictionary representing a person and then store as much information as you want about that person. You can store their name, age, location, profession, and any other aspect of a person you can describe. You\u2019ll be able to store any two kinds of information that can be matched up, such as a list of words and their meanings, a list of people\u2019s names and their favorite numbers, a list of mountains and their elevations, and so forth.</p>"},{"location":"python/Dictionaries/#a-simple-dictionary-and-basic-function","title":"A SIMPLE DICTIONARY and Basic function\u00b6","text":""},{"location":"python/Dictionaries/#example-1","title":"Example 1\u00b6","text":""},{"location":"python/Dictionaries/#example-2","title":"Example 2\u00b6","text":""},{"location":"python/Dictionaries/#example-3","title":"Example 3\u00b6","text":""},{"location":"python/Dictionaries/#looping-through-a-dictionary","title":"LOOPING THROUGH A DICTIONARY\u00b6","text":"<p>A single Python dictionary can contain just a few key-value pairs or millions of pairs. Because a dictionary can contain large amounts of data, Python lets you loop through a dictionary. Dictionaries can be used to store information in a variety of ways; therefore, several different ways exist to loop through them. You can loop through all of a dictionary\u2019s key-value pairs, through its keys, or through its values.</p>"},{"location":"python/Dictionaries/#looping-through-all-key-value-pairs","title":"Looping Through All Key-Value Pairs\u00b6","text":"<p>Before we explore the different approaches to looping, let\u2019s consider a new dictionary designed to store information about a user on a website. The following dictionary would store one person\u2019s username, first name, and last name:</p>"},{"location":"python/Dictionaries/#looping-through-all-the-keys-in-a-dictionary","title":"Looping Through All the Keys in a Dictionary\u00b6","text":"<p>The keys() method is useful when you don\u2019t need to work with all of the values in a dictionary. Let\u2019s loop through the favorite_languages dictionary and print the names of everyone who took the poll:</p>"},{"location":"python/Dictionaries/#looping-through-a-dictionarys-keys-in-a-particular-order","title":"Looping Through a Dictionary\u2019s Keys in a Particular Order\u00b6","text":"<p>Starting in Python 3.7, looping through a dictionary returns the items in the same order they were inserted. Sometimes, though, you\u2019ll want to loop through a dictionary in a different order.</p> <p>One way to do this is to sort the keys as they\u2019re returned in the for loop. You can use the sorted() function to get a copy of the keys in order:</p>"},{"location":"python/Dictionaries/#looping-through-all-values-in-a-dictionary","title":"Looping Through All Values in a Dictionary\u00b6","text":"<p>If you are primarily interested in the values that a dictionary contains, you can use the values() method to return a list of values without any keys. For example, say we simply want a list of all languages chosen in our programming language poll without the name of the person who chose each language:</p>"},{"location":"python/Dictionaries/#nesting","title":"NESTING\u00b6","text":"<p>Sometimes you\u2019ll want to store multiple dictionaries in a list, or a list of items as a value in a dictionary. This is called nesting. You can nest dictionaries inside a list, a list of items inside a dictionary, or even a dictionary inside another dictionary. Nesting is a powerful feature, as the following examples will demonstrate.</p>"},{"location":"python/Dictionaries/#a-list-of-dictionaries","title":"A List of Dictionaries\u00b6","text":"<p>The alien_0 dictionary contains a variety of information about one alien, but it has no room to store information about a second alien, much less a screen full of aliens. How can you manage a fleet of aliens? One way is to make a list of aliens in which each alien is a dictionary of information about that alien. For example, the following code builds a list of three aliens:</p>"},{"location":"python/Dictionaries/#a-list-in-a-dictionary","title":"A List in a Dictionary\u00b6","text":"<p>Rather than putting a dictionary inside a list, it\u2019s sometimes useful to put a list inside a dictionary. For example, consider how you might describe a pizza that someone is ordering. If you were to use only a list, all you could really store is a list of the pizza\u2019s toppings. With a dictionary, a list of toppings can be just one aspect of the pizza you\u2019re describing.</p> <p>In the following example, two kinds of information are stored for each pizza: a type of crust and a list of toppings. The list of toppings is a value associated with the key 'toppings'. To use the items in the list, we give the name of the dictionary and the key 'toppings', as we would any value in the dictionary. Instead of returning a single value, we get a list of toppings:</p>"},{"location":"python/Dictionaries/#a-dictionary-in-a-dictionary","title":"A Dictionary in a Dictionary\u00b6","text":"<p>You can nest a dictionary inside another dictionary, but your code can get complicated quickly when you do. For example, if you have several users for a website, each with a unique username, you can use the usernames as the keys in a dictionary. You can then store information about each user by using a dictionary as the value associated with their username. In the following listing, we store three pieces of information about each user: their first name, last name, and location. We\u2019ll access this information by looping through the usernames and the dictionary of information associated with each username:</p>"},{"location":"python/Dictionaries/#example-1-continue","title":"Example 1 Continue\u00b6","text":""},{"location":"python/Dictionaries/#summary","title":"SUMMARY\u00b6","text":"<p>In this chapter you learned how to define a dictionary and how to work with the information stored in a dictionary. You learned how to access and modify individual elements in a dictionary, and how to loop through all of the information in a dictionary. You learned to loop through a dictionary\u2019s key-value pairs, its keys, and its values. You also learned how to nest multiple dictionaries in a list, nest lists in a dictionary, and nest a dictionary inside a dictionary.|</p>"},{"location":"python/Dictionaries/#references","title":"References\u00b6","text":"<ul> <li>Matthes, Eric (2022). Python Crash Course, 3rd Edition: A Hands-On, Project-Based Introduction to Programming. No Starch Press. ISBN: 978-1593279288. (Publisher website)</li> <li>Dr.Qiusheng Wu Online lecture from Youtube</li> </ul>"},{"location":"python/GEOG510_list/","title":"Introducing List","text":"In\u00a0[1]: Copied! <pre>x = 5\ny = \"What going on?\"\nz = [1,2,3]\n</pre> x = 5 y = \"What going on?\" z = [1,2,3]  In\u00a0[3]: Copied! <pre>print(type(x))\nprint(type(y))\nprint(type(z))\n</pre> print(type(x)) print(type(y)) print(type(z)) <pre>&lt;class 'int'&gt;\n&lt;class 'str'&gt;\n&lt;class 'list'&gt;\n</pre> In\u00a0[8]: Copied! <pre>bicycle = ['trees', 'command', 'apple', 4, 'redlines']\nbicycle\n</pre> bicycle = ['trees', 'command', 'apple', 4, 'redlines'] bicycle Out[8]: <pre>['trees', 'command', 'apple', 4, 'redlines']</pre> In\u00a0[6]: Copied! <pre>print(bicycle[0])\n</pre> print(bicycle[0]) <pre>trees\n</pre> <p>You can also use the string methods from Chapter 2 on any element in this list. For example, you can format the element 'trek' more neatly by using the title() method:</p> In\u00a0[7]: Copied! <pre>print(bicycle[0].title())\n</pre> print(bicycle[0].title()) <pre>Trees\n</pre> In\u00a0[9]: Copied! <pre>print(bicycle[2].title())\n</pre> print(bicycle[2].title()) <pre>Apple\n</pre> <p>Python has a special syntax for accessing the last element in a list. By ask ing for the item at index -1, Python always returns the last item in the list:</p> In\u00a0[11]: Copied! <pre>print(bicycle[-2])\n# count from back\n</pre> print(bicycle[-2]) # count from back <pre>4\n</pre> In\u00a0[12]: Copied! <pre>print(bicycle[-1].title())\n</pre> print(bicycle[-1].title()) <pre>Redlines\n</pre> In\u00a0[14]: Copied! <pre>sel = bicycle[1]\nsel\n</pre> sel = bicycle[1] sel Out[14]: <pre>'command'</pre> In\u00a0[16]: Copied! <pre>sel.upper().title()\n</pre> sel.upper().title() Out[16]: <pre>'Command'</pre> In\u00a0[20]: Copied! <pre>sel.upper().title()[1]\n# text is considered list\n# index must be short, not larger than the maximum\n# sel[7]\n</pre> sel.upper().title()[1] # text is considered list # index must be short, not larger than the maximum # sel[7] Out[20]: <pre>'o'</pre> In\u00a0[21]: Copied! <pre>bicycles = ['trek', 'cannondale', 'redline', 'specialized']\nmessage = f\"My first bicycle was a {bicycles[0].title()}.\"\nprint(message)\n</pre> bicycles = ['trek', 'cannondale', 'redline', 'specialized'] message = f\"My first bicycle was a {bicycles[0].title()}.\" print(message) <pre>My first bicycle was a Trek.\n</pre> In\u00a0[22]: Copied! <pre>motorcycles = ['Eric', 'John', 'deng']\nmotorcycles\n</pre> motorcycles = ['Eric', 'John', 'deng'] motorcycles Out[22]: <pre>['Eric', 'John', 'deng']</pre> In\u00a0[23]: Copied! <pre>motorcycles[0]= 'Cheng'\nmotorcycles\n</pre> motorcycles[0]= 'Cheng' motorcycles Out[23]: <pre>['Cheng', 'John', 'deng']</pre> In\u00a0[24]: Copied! <pre>motorcycles.append('Roy')\nmotorcycles\n</pre> motorcycles.append('Roy') motorcycles Out[24]: <pre>['Cheng', 'John', 'deng', 'Roy']</pre> <p>The append() method makes it easy to build lists dynamically. For example, you can start with an empty list and then add items to the list using a series of append() calls. Using an empty list, let\u2019s add the elements 'honda', 'yamaha', and 'suzuki' to the list:</p> In\u00a0[26]: Copied! <pre>motorcyles = []\nmotorcyles.append('Eric')\nmotorcyles.append('Deng')\nmotorcyles.append('John')\nmotorcyles\n</pre> motorcyles = [] motorcyles.append('Eric') motorcyles.append('Deng') motorcyles.append('John') motorcyles Out[26]: <pre>['Eric', 'Deng', 'John']</pre> In\u00a0[27]: Copied! <pre>a =() # tuple\n</pre> a =() # tuple In\u00a0[28]: Copied! <pre>b =[] # list\n</pre> b =[] # list In\u00a0[29]: Copied! <pre>c ={} # dictionary\n</pre> c ={} # dictionary In\u00a0[32]: Copied! <pre>motorcycles = ['Eric', 'Yang', 'Hu']\nmotorcycles.insert(0, 'Cheng')\nmotorcycles\n</pre> motorcycles = ['Eric', 'Yang', 'Hu'] motorcycles.insert(0, 'Cheng') motorcycles Out[32]: <pre>['Cheng', 'Eric', 'Yang', 'Hu']</pre> In\u00a0[33]: Copied! <pre>motorcycles.insert(2, 'Liu')\nmotorcycles\n</pre> motorcycles.insert(2, 'Liu') motorcycles Out[33]: <pre>['Cheng', 'Eric', 'Liu', 'Yang', 'Hu']</pre> In\u00a0[34]: Copied! <pre>del motorcycles[0]\nmotorcycles\n</pre> del motorcycles[0] motorcycles Out[34]: <pre>['Eric', 'Liu', 'Yang', 'Hu']</pre> In\u00a0[35]: Copied! <pre>del motorcycles[1]\nmotorcycles\n</pre> del motorcycles[1] motorcycles Out[35]: <pre>['Eric', 'Yang', 'Hu']</pre> In\u00a0[36]: Copied! <pre>del motorcycles # no longer exist\n</pre> del motorcycles # no longer exist In\u00a0[37]: Copied! <pre>motorcycles\n</pre> motorcycles <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[37], line 1\n----&gt; 1 motorcycles\n\nNameError: name 'motorcycles' is not defined</pre> In\u00a0[38]: Copied! <pre>motor = ['honda', 'chen', 'yang']\npop_motor = motor.pop()\npop_motor # last in the list\n</pre> motor = ['honda', 'chen', 'yang'] pop_motor = motor.pop() pop_motor # last in the list Out[38]: <pre>'yang'</pre> In\u00a0[40]: Copied! <pre>last_own=motor.pop()\nprint(f\"the last motorcycle I owned was a {last_own.title()}.\")\n</pre> last_own=motor.pop() print(f\"the last motorcycle I owned was a {last_own.title()}.\") <pre>the last motorcycle I owned was a Chen.\n</pre> In\u00a0[41]: Copied! <pre>first_owned = motor.pop(0)\nprint(f\"the last motorcycle I owned was a {first_owned.title()}.\")\n</pre> first_owned = motor.pop(0) print(f\"the last motorcycle I owned was a {first_owned.title()}.\") <pre>the last motorcycle I owned was a Honda.\n</pre> In\u00a0[56]: Copied! <pre>motor.append('chen')\nmotor\n</pre>  motor.append('chen') motor Out[56]: <pre>['yamha', 'honda', 'suzuki', 'chen']</pre> In\u00a0[57]: Copied! <pre>motor.remove('chen')\nmotor\n</pre> motor.remove('chen') motor Out[57]: <pre>['yamha', 'honda', 'suzuki']</pre> In\u00a0[58]: Copied! <pre>motorcycles = ['honda', 'yamaha', 'suzuki', 'ducati']\nprint(motorcycles)\ntoo_expensive = 'ducati'\nmotorcycles.remove(too_expensive)\nprint(motorcycles)\nprint(f\"\\nA {too_expensive.title()} is too expensive for me.\")\n</pre> motorcycles = ['honda', 'yamaha', 'suzuki', 'ducati'] print(motorcycles) too_expensive = 'ducati' motorcycles.remove(too_expensive) print(motorcycles) print(f\"\\nA {too_expensive.title()} is too expensive for me.\") <pre>['honda', 'yamaha', 'suzuki', 'ducati']\n['honda', 'yamaha', 'suzuki']\n\nA Ducati is too expensive for me.\n</pre> In\u00a0[59]: Copied! <pre>cars = ['audi','hongqi','toyota', 'bwc']\ncars.sort()\ncars\n</pre> cars = ['audi','hongqi','toyota', 'bwc'] cars.sort() cars Out[59]: <pre>['audi', 'bwc', 'hongqi', 'toyota']</pre> <p>You can also sort this list in reverse alphabetical order by passing the argument reverse=True to the sort() method. The following example sorts the list of cars in reverse alphabetical order:</p> In\u00a0[61]: Copied! <pre>cars.sort(reverse=True)\ncars\n</pre> cars.sort(reverse=True) cars Out[61]: <pre>['toyota', 'hongqi', 'bwc', 'audi']</pre> In\u00a0[62]: Copied! <pre>cars = ['bmw', 'audi', 'toyota', 'subaru']\nprint(\"Here is the original list:\")\nprint(cars)\nprint(\"\\nHere is the sorted list:\")\nprint(sorted(cars))\nprint(\"\\nHere is the original list again:\")\nprint(cars)\n</pre> cars = ['bmw', 'audi', 'toyota', 'subaru'] print(\"Here is the original list:\") print(cars) print(\"\\nHere is the sorted list:\") print(sorted(cars)) print(\"\\nHere is the original list again:\") print(cars) <pre>Here is the original list:\n['bmw', 'audi', 'toyota', 'subaru']\n\nHere is the sorted list:\n['audi', 'bmw', 'subaru', 'toyota']\n\nHere is the original list again:\n['bmw', 'audi', 'toyota', 'subaru']\n</pre> In\u00a0[63]: Copied! <pre>cars.reverse()\ncars\n</pre> cars.reverse() cars Out[63]: <pre>['subaru', 'toyota', 'audi', 'bmw']</pre> In\u00a0[64]: Copied! <pre>len(cars)\n</pre> len(cars) Out[64]: <pre>4</pre> In\u00a0[65]: Copied! <pre>cars = ['bmw', 'audi', 'toyota', 'subaru', 1, 3, 4, 20]\nlen(cars)\n</pre> cars = ['bmw', 'audi', 'toyota', 'subaru', 1, 3, 4, 20] len(cars) Out[65]: <pre>8</pre> In\u00a0[66]: Copied! <pre>print(cars[8])\n</pre> print(cars[8]) <pre>\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In[66], line 1\n----&gt; 1 print(cars[8])\n\nIndexError: list index out of range</pre>"},{"location":"python/GEOG510_list/#introducing-list","title":"Introducing List\u00b6","text":"<p>In this lecture and the next you\u2019ll learn what lists are and how to start working with the elements in a list. Lists allow you to store sets of information in one place, whether you have just a few items or millions of items. Lists are one of Python\u2019s most powerful features readily accessible to new programmers, and they tie together many important concepts in programming.</p>"},{"location":"python/GEOG510_list/#type-in-python","title":"Type in Python\u00b6","text":"<p>Python have a built-in method called as type which generally come in handy while figuring out the type of variable used in the program in the runtime.</p> <p>If a single argument (object) is passed to type() built-in, it returns type of the given object. If three arguments (name, bases and dict) are passed, it returns a new type object.</p>"},{"location":"python/GEOG510_list/#what-is-a-list","title":"What is a List?\u00b6","text":"<p>A list is a collection of items in a particular order. You can make a list that includes the letters of the alphabet, the digits from 0\u20139, or the names of all the people in your family. You can put anything you want into a list, and the items in your list don\u2019t have to be related in any particular way. Because a list usually contains more than one element, it\u2019s a good idea to make the name of your list plural, such as letters, digits, or names. In Python, square brackets ([]) indicate a list, and individual elements in the list are separated by commas. Here\u2019s a simple example of a list that contains a few kinds of bicycles:</p>"},{"location":"python/GEOG510_list/#accessing-elements-in-a-list","title":"Accessing Elements in a List\u00b6","text":"<p>Accessing Elements in a List Lists are ordered collections, so you can access any element in a list by telling Python the position, or index, of the item desired. To access an element in a list, write the name of the list followed by the index of the item enclosed in square brackets. For example, let\u2019s pull out the first bicycle in the list bicycles:</p>"},{"location":"python/GEOG510_list/#index-positions-start-at-0-not-1","title":"Index Positions Start at 0, Not 1\u00b6","text":"<p>Python considers the first item in a list to be at position 0, not position 1. This is true of most programming languages, and the reason has to do with how the list operations are implemented at a lower level. If you\u2019re receiving unexpected results, determine whether you are making a simple off-by-one error.</p> <p>The second item in a list has an index of 1. Using this counting sys tem, you can get any element you want from a list by subtracting one from its position in the list. For instance, to access the fourth item in a list, you request the item at index 3.</p> <p>The following asks for the bicycles at index 1 and index 3:</p>"},{"location":"python/GEOG510_list/#using-individual-values-from-a-list","title":"Using Individual Values from a List\u00b6","text":"<p>You can use individual values from a list just as you would any other variable. For example, you can use f-strings to create a message based on a value from a list. Let\u2019s try pulling the first bicycle from the list and composing a message using that value.</p>"},{"location":"python/GEOG510_list/#changing-adding-and-removing-elements","title":"Changing, Adding, and Removing Elements\u00b6","text":"<p>Most lists you create will be dynamic, meaning you\u2019ll build a list and then add and remove elements from it as your program runs its course. For example, you might create a game in which a player has to shoot aliens out of the sky. You could store the initial set of aliens in a list and then remove an alien from the list each time one is shot down. Each time a new alien appears on the screen, you add it to the list. Your list of aliens will increase and decrease in length throughout the course of the game.</p>"},{"location":"python/GEOG510_list/#modifying-elements-in-a-list","title":"Modifying Elements in a List\u00b6","text":"<p>The syntax for modifying an element is similar to the syntax for accessing an element in a list. To change an element, use the name of the list followed by the index of the element you want to change, and then provide the new value you want that item to have. For example, let\u2019s say we have a list of motorcycles, and the first item in the list is 'honda'. How would we change the value of this first item?</p>"},{"location":"python/GEOG510_list/#adding-elements-to-a-list","title":"Adding Elements to a List\u00b6","text":"<p>You might want to add a new element to a list for many reasons. For example, you might want to make new aliens appear in a game, add new data to a visualization, or add new registered users to a website you\u2019ve built. Python provides several ways to add new data to existing lists.</p>"},{"location":"python/GEOG510_list/#appending-elements-to-the-end-of-a-list","title":"Appending Elements to the End of a List\u00b6","text":"<p>The simplest way to add a new element to a list is to append the item to the list. When you append an item to a list, the new element is added to the end of the list. Using the same list we had in the previous example, we\u2019ll add the new element 'ducati' to the end of the list:</p>"},{"location":"python/GEOG510_list/#different-between-and","title":"different between (), and []\u00b6","text":""},{"location":"python/GEOG510_list/#inserting-elements-into-a-list","title":"Inserting Elements into a List\u00b6","text":"<p>You can add a new element at any position in your list by using the insert() method. You do this by specifying the index of the new element and the value of the new item.</p>"},{"location":"python/GEOG510_list/#removing-elements-from-a-list","title":"Removing Elements from a List\u00b6","text":"<p>Often, you\u2019ll want to remove an item or a set of items from a list. For example, when a player shoots down an alien from the sky, you\u2019ll most likely want to remove it from the list of active aliens. Or when a user decides to cancel their account on a web application you created, you\u2019ll want to remove that user from the list of active users. You can remove an item according to its position in the list or according to its value. Removing an Item Using the del Statement If you know the position of the item you want to remove from a list, you can use the del statement.</p>"},{"location":"python/GEOG510_list/#del-function-can-delete-anything-delete-function-variables-list-or-item-within-the-list-etc","title":"del function can delete anything; delete function, variables, list, or item within the list etc.\u00b6","text":""},{"location":"python/GEOG510_list/#removing-an-item-using-the-pop-method","title":"Removing an Item Using the pop() Method\u00b6","text":"<p>Sometimes you\u2019ll want to use the value of an item after you remove it from a list. For example, you might want to get the x and y position of an alien that was just shot down, so you can draw an explosion at that position. In a web application, you might want to remove a user from a list of active members and then add that user to a list of inactive members. The pop() method removes the last item in a list, but it lets you work with that item after removing it. The term pop comes from thinking of a list as a stack of items and popping one item off the top of the stack. In this analogy, the top of a stack corresponds to the end of a list.</p>"},{"location":"python/GEOG510_list/#popping-items-from-any-position-in-a-list","title":"Popping Items from any Position in a List\u00b6","text":"<p>You can use pop() to remove an item from any position in a list by including the index of the item you want to remove in parentheses.</p>"},{"location":"python/GEOG510_list/#removing-an-item-by-value","title":"Removing an Item by Value\u00b6","text":"<p>Sometimes you won\u2019t know the position of the value you want to remove from a list. If you only know the value of the item you want to remove, you can use the remove() method. For example, let\u2019s say we want to remove the value 'ducati' from the list of motorcycles.</p>"},{"location":"python/GEOG510_list/#organizing-a-list","title":"Organizing a List\u00b6","text":"<p>Often, your lists will be created in an unpredictable order, because you can\u2019t always control the order in which your users provide their data. Although this is unavoidable in most circumstances, you\u2019ll frequently want to present your information in a particular order. Sometimes you\u2019ll want to preserve the original order of your list, and other times you\u2019ll want to change the original order. Python provides a number of different ways to organize your lists, depending on the situation.</p>"},{"location":"python/GEOG510_list/#sorting-a-list-permanently-with-the-sort-method","title":"Sorting a List Permanently with the sort() Method\u00b6","text":"<p>Python\u2019s sort() method makes it relatively easy to sort a list. Imagine we have a list of cars and want to change the order of the list to store them alphabetically. To keep the task simple, let\u2019s assume that all the values in the list are lowercase.</p>"},{"location":"python/GEOG510_list/#sorting-a-list-temporarily-with-the-sorted-function","title":"Sorting a List Temporarily with the sorted() Function\u00b6","text":"<p>To maintain the original order of a list but present it in a sorted order, you can use the sorted() function. The sorted() function lets you display your list in a particular order but doesn\u2019t affect the actual order of the list. Let\u2019s try this function on the list of cars.</p>"},{"location":"python/GEOG510_list/#printing-a-list-in-reverse-order","title":"Printing a List in Reverse Order\u00b6","text":"<p>To reverse the original order of a list, you can use the reverse() method. If we originally stored the list of cars in chronological order according to when we owned them, we could easily rearrange the list into reverse chronological order:</p>"},{"location":"python/GEOG510_list/#finding-the-length-of-a-list","title":"Finding the Length of a List\u00b6","text":"<p>You can quickly find the length of a list by using the len() function. The list in this example has four items, so its length is 4:</p>"},{"location":"python/GEOG510_list/#avoiding-index-errors-when-working-with-lists","title":"Avoiding Index Errors When Working with Lists\u00b6","text":"<p>One type of error is common to see when you\u2019re working with lists for the first time. Let\u2019s say you have a list with three items, and you ask for the fourth item:</p>"},{"location":"python/GEOG510_list/#finish","title":"Finish\u00b6","text":""},{"location":"python/GEOG510_list/#references","title":"References\u00b6","text":"<ul> <li>Matthes, Eric (2022). Python Crash Course, 3rd Edition: A Hands-On, Project-Based Introduction to Programming. No Starch Press. ISBN: 978-1593279288. (Publisher website)</li> <li>Dr.Qiusheng Wu online lecture</li> </ul>"},{"location":"python/files_and_exception_handling/","title":"Files and Exceptions","text":"In\u00a0[1]: Copied! <pre>with open('data/pi_digits.txt') as file_object: \n    contents = file_object.read()\nprint(contents)\n</pre> with open('data/pi_digits.txt') as file_object:      contents = file_object.read() print(contents) <pre>3.1415926535 \n  8979323846 \n  2643383279\n\n</pre> <p>Python default path is the linux and mac file path, it should be use '/' instead of '' (special character) . Compare below two cell. You need to insert 'r' before a windows path file. \"//\" also work</p> In\u00a0[2]: Copied! <pre>with open(r'C:\\Users\\zyang\\OneDrive\\\u684c\u9762\\ee.txt') as file_object:\n    contents = file_object.read()\nprint(contents)\n</pre> with open(r'C:\\Users\\zyang\\OneDrive\\\u684c\u9762\\ee.txt') as file_object:     contents = file_object.read() print(contents) <pre>eeeeee\n</pre> In\u00a0[4]: Copied! <pre>with open('C:/Users/zyang/OneDrive/\u684c\u9762/ee.txt') as file_object:\n    contents = file_object.read()\nprint(contents)\n</pre> with open('C:/Users/zyang/OneDrive/\u684c\u9762/ee.txt') as file_object:     contents = file_object.read() print(contents) <pre>eeeeee\n</pre> <p>The first line of this program has a lot going on. Let\u2019s start by looking at the open() function. To do any work with a file, even just printing its contents, you first need to open the file to access it. The open() function needs one argument: the name of the file you want to open. Python looks for this file in the directory where the program that\u2019s currently being executed is stored. In this example, file_reader.py is currently running, so Python looks for pi_digits.txt in the directory where file_reader.py is stored. The open() function returns an object representing the file. Here, open('pi_digits.txt') returns an object representing pi_digits.txt. Python assigns this object to file_object, which we\u2019ll work with later in the program.</p> <p>The keyword with closes the file once access to it is no longer needed. Notice how we call open() in this program but not close(). You could open and close the file by calling open() and close(), but if a bug in your program prevents the close() method from being executed, the file may never close. This may seem trivial, but improperly closed files can cause data to be lost or corrupted. And if you call close() too early in your program, you\u2019ll find yourself trying to work with a closed file (a file you can\u2019t access), which leads to more errors. It\u2019s not always easy to know exactly when you should close a file, but with the structure shown here, Python will figure that out for you. All you have to do is open the file and work with it as desired, trusting that Python will close it automatically when the with block finishes execution.</p> <p>Once we have a file object representing pi_digits.txt, we use the read() method in the second line of our program to read the entire contents of the file and store it as one long string in contents. When we print the value of contents, we get the entire text file back.</p> <p>The only difference between this output and the original file is the extra blank line at the end of the output. The blank line appears because read() returns an empty string when it reaches the end of the file; this empty string shows up as a blank line. If you want to remove the extra blank line, you can use rstrip() in the call to print():</p> In\u00a0[5]: Copied! <pre>with open('data/pi_digits.txt') as file_object:\n    contents = file_object.read()\n    print(contents.rstrip())\n</pre> with open('data/pi_digits.txt') as file_object:     contents = file_object.read()     print(contents.rstrip()) <pre>3.1415926535 \n  8979323846 \n  2643383279\n</pre> <p>If you choose to read file, and after finish coding you need to close the file</p> In\u00a0[6]: Copied! <pre>f =open('data/pi_digits.txt')\nf.read()\n</pre> f =open('data/pi_digits.txt') f.read() Out[6]: <pre>'3.1415926535 \\n  8979323846 \\n  2643383279\\n'</pre> In\u00a0[7]: Copied! <pre>f.close()\n</pre> f.close() In\u00a0[8]: Copied! <pre>filename = 'data/pi_digits.txt'\n\nwith open(filename) as file_object:\n    for line in file_object:\n        print(line)\n</pre> filename = 'data/pi_digits.txt'  with open(filename) as file_object:     for line in file_object:         print(line) <pre>3.1415926535 \n\n  8979323846 \n\n  2643383279\n\n</pre> <pre><code>\u278a filename = 'pi_digits.txt'\n\n\u278b with open(filename) as file_object:\n\u278c\u00a0\u00a0\u00a0\u00a0\u00a0for line in file_object:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(line)\n</code></pre> <p>At \u278a we assign the name of the file we\u2019re reading from to the variable filename. This is a common convention when working with files. Because the variable filename doesn\u2019t represent the actual file\u2014it\u2019s just a string telling Python where to find the file\u2014you can easily swap out 'pi_digits.txt' for the name of another file you want to work with. After we call open(), an object representing the file and its contents is assigned to the variable file_object \u278b. We again use the with syntax to let Python open and close the file properly. To examine the file\u2019s contents, we work through each line in the file by looping over the file object \u278c.</p> <p>When we print each line, we find even more blank lines. These blank lines appear because an invisible newline character is at the end of each line in the text file. The print function adds its own newline each time we call it, so we end up with two newline characters at the end of each line: one from the file and one from print(). Using rstrip() on each line in the print() call eliminates these extra blank lines:</p> In\u00a0[10]: Copied! <pre>filename = 'data/pi_digits.txt'\n\nwith open(filename) as file_object:\n    for line in file_object:\n        print(line.rstrip()) # .rstrip() eliminate the special character at the end of each line\n</pre> filename = 'data/pi_digits.txt'  with open(filename) as file_object:     for line in file_object:         print(line.rstrip()) # .rstrip() eliminate the special character at the end of each line <pre>3.1415926535\n  8979323846\n  2643383279\n</pre> In\u00a0[2]: Copied! <pre>filename= \"C:/Users/zyang/OneDrive/\u684c\u9762/gift_government.txt\"\nwith open(filename) as file_object:\n    for line in file_object:\n        print(line.rstrip())\n</pre> filename= \"C:/Users/zyang/OneDrive/\u684c\u9762/gift_government.txt\" with open(filename) as file_object:     for line in file_object:         print(line.rstrip()) <pre>hhhh\nhu78\nchen98\nhua0920\n\n</pre> In\u00a0[1]: Copied! <pre>filename = 'data/pi_digits.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\nfor line in lines:\n    print(line.rstrip())\n</pre> filename = 'data/pi_digits.txt'  with open(filename) as file_object:     lines = file_object.readlines()  for line in lines:     print(line.rstrip()) <pre>3.1415926535\n  8979323846\n  2643383279\n</pre> <pre><code>filename = 'data/pi_digits.txt'\n\n\u00a0\u00a0\u00a0with open(filename) as file_object:\n\u278a\u00a0\u00a0\u00a0\u00a0\u00a0lines = file_object.readlines()\n\n\u278b for line in lines:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(line.rstrip())\n</code></pre> <p>At \u278a the readlines() method takes each line from the file and stores it in a list. This list is then assigned to lines, which we can continue to work with after the with block ends. At \u278b we use a simple for loop to print each line from lines. Because each item in lines corresponds to each line in the file, the output matches the contents of the file exactly.</p> In\u00a0[17]: Copied! <pre>filename = 'data/pi_digits.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\npi_string = ''\nfor line in lines:\n    pi_string += line.rstrip() #eliminate the empty line\nprint(pi_string)\nprint(len(pi_string))\n</pre> filename = 'data/pi_digits.txt'  with open(filename) as file_object:     lines = file_object.readlines() pi_string = '' for line in lines:     pi_string += line.rstrip() #eliminate the empty line print(pi_string) print(len(pi_string)) <pre>3.1415926535  8979323846  2643383279\n36\n</pre> In\u00a0[4]: Copied! <pre>filename = 'data/pi_digits.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\npi_string = ''\nfor line in lines:\n    pi_string += line.strip() #only keep string, eliminate all empty\nprint(pi_string)\nprint(len(pi_string))\n</pre> filename = 'data/pi_digits.txt'  with open(filename) as file_object:     lines = file_object.readlines() pi_string = '' for line in lines:     pi_string += line.strip() #only keep string, eliminate all empty print(pi_string) print(len(pi_string)) <pre>3.141592653589793238462643383279\n32\n</pre> <p>Note: When Python reads from a text file, it interprets all text in the file as a string. If you read in a number and want to work with that value in a numerical context, you\u2019ll have to convert it to an integer using the int() function or convert it to a float using the float() function.</p> In\u00a0[5]: Copied! <pre>filename = 'data/pi_million_digits.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\npi_string = ''\nfor line in lines:\n    pi_string += line.strip()\n\nprint(f\"{pi_string[:52]}...\")\nprint(len(pi_string))\n</pre> filename = 'data/pi_million_digits.txt'  with open(filename) as file_object:     lines = file_object.readlines()  pi_string = '' for line in lines:     pi_string += line.strip()  print(f\"{pi_string[:52]}...\") print(len(pi_string)) <pre>3.14159265358979323846264338327950288419716939937510...\n1000002\n</pre> <p>Python has no inherent limit to how much data you can work with; you can work with as much data as your system\u2019s memory can handle.</p> In\u00a0[8]: Copied! <pre>filename = 'data/pi_million_digits.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\npi_string = ''\nfor line in lines:\n    pi_string += line.strip()\n\nbirthday = input(\"Enter your birthday, in the form mmddyy: \")\nif birthday in pi_string:\n    print(\"Your birthday appears in the first million digits of pi!\")\nelse:\n    print(\"Your birthday does not appear in the first million digits of pi.\")\n</pre> filename = 'data/pi_million_digits.txt'  with open(filename) as file_object:     lines = file_object.readlines()  pi_string = '' for line in lines:     pi_string += line.strip()  birthday = input(\"Enter your birthday, in the form mmddyy: \") if birthday in pi_string:     print(\"Your birthday appears in the first million digits of pi!\") else:     print(\"Your birthday does not appear in the first million digits of pi.\") <pre>Enter your birthday, in the form mmddyy:  901031\nYour birthday appears in the first million digits of pi!\n</pre> In\u00a0[14]: Copied! <pre>filename = 'data/pi_million_digits.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\npi_string = ''\nfor line in lines:\n    pi_string += line.strip()\nprompt = 'Enter your birthday, in the form mmddyy:'\nprompt += '\\n(Enter quit when you finish)'\nwhile True:\n    \n    birthday = input(prompt)\n    if birthday == 'quit':\n        break\n    if birthday in pi_string:\n        print(\"Your birthday appears in the first million digits of pi!\")\n    else:\n        print(\"Your birthday does not appear in the first million digits of pi.\")\n</pre> filename = 'data/pi_million_digits.txt'  with open(filename) as file_object:     lines = file_object.readlines()  pi_string = '' for line in lines:     pi_string += line.strip() prompt = 'Enter your birthday, in the form mmddyy:' prompt += '\\n(Enter quit when you finish)' while True:          birthday = input(prompt)     if birthday == 'quit':         break     if birthday in pi_string:         print(\"Your birthday appears in the first million digits of pi!\")     else:         print(\"Your birthday does not appear in the first million digits of pi.\") <pre>Enter your birthday, in the form mmddyy:\n(Enter quit when you finish) 032001\nYour birthday appears in the first million digits of pi!\nEnter your birthday, in the form mmddyy:\n(Enter quit when you finish) quit\n</pre> In\u00a0[16]: Copied! <pre>filename = 'data/programming.txt'\n\nwith open(filename, 'w') as file_object:\n    file_object.write(\"I love programming.\")\n</pre> filename = 'data/programming.txt'  with open(filename, 'w') as file_object:     file_object.write(\"I love programming.\")      <p>Note: Be careful when you try to use w mode to write a file. When you try to do that make sure there is no file with a same name. If it already exist, the python program will delete the exisiting one, and create a new one with just you write.</p> <pre><code>\u278a with open(filename, 'w') as file_object:\n\u278b\u00a0\u00a0\u00a0\u00a0\u00a0file_object.write(\"I love programming.\")\n</code></pre> <p>The call to open() in this example has two arguments \u278a. The first argument is still the name of the file we want to open. The second argument, 'w', tells Python that we want to open the file in write mode. You can open a file in read mode ('r'), write mode ('w'), append mode ('a'), or a mode that allows you to read and write to the file ('r+'). If you omit the mode argument, Python opens the file in read-only mode by default.</p> <p>The open() function automatically creates the file you\u2019re writing to if it doesn\u2019t already exist. However, be careful opening a file in write mode ('w') because if the file does exist, Python will erase the contents of the file before returning the file object.</p> <p>At \u278b we use the write() method on the file object to write a string to the file. This program has no terminal output, but if you open the file programming.txt, you\u2019ll see one line:</p> <p>NOTE: Python can only write strings to a text file. If you want to store numerical data in a text file, you\u2019ll have to convert the data to string format first using the str() function.</p> In\u00a0[20]: Copied! <pre>filename = 'data/programming.txt'\n\nwith open(filename, 'w') as file_object:\n    file_object.write(\"I love programming.\")\n    file_object.write(\"I love creating new games.\")\n</pre> filename = 'data/programming.txt'  with open(filename, 'w') as file_object:     file_object.write(\"I love programming.\")     file_object.write(\"I love creating new games.\") <p>If you open programming.txt, you\u2019ll see the two lines squished together:</p> <pre><code>I love programming.I love creating new games.\n</code></pre> <p>Including newlines in your calls to write() makes each string appear on its own line:</p> In\u00a0[19]: Copied! <pre>filename = 'data/programmings.txt'\n\nwith open(filename, 'w') as file_object:\n    file_object.write(\"I love programming.\\n\")\n    file_object.write(\"I love creating new games.\")\n</pre> filename = 'data/programmings.txt'  with open(filename, 'w') as file_object:     file_object.write(\"I love programming.\\n\")     file_object.write(\"I love creating new games.\") <p>The output now appears on separate lines:</p> <pre><code>I love programming.\nI love creating new games.\n</code></pre> <p>You can also use spaces, tab characters, and blank lines to format your output, just as you\u2019ve been doing with terminal-based output.</p> <p>Note: check the different of the two code above. The first one create all the content in the same line, because in programming, if you don't specify at what part you want to separate the senetences, it will automatically creates into one line. The second one using '\\n' to separate the line</p> In\u00a0[21]: Copied! <pre>filename = 'data/programmingss.txt'\n\nwith open(filename, 'w') as file_object:\n    file_object.write(\"I love programming.\\t\\t\\t I love creating new games.\")\n</pre> filename = 'data/programmingss.txt'  with open(filename, 'w') as file_object:     file_object.write(\"I love programming.\\t\\t\\t I love creating new games.\")      <p>Note: /t using as empty space to separate the two sentences in one line.</p> In\u00a0[22]: Copied! <pre>filename = 'data/programming.txt'\n\nwith open(filename, 'a') as file_object:\n    file_object.write(\"I also love finding meaning in large datasets.\\n\")\n    file_object.write(\"I love creating apps that can run in a browser.\\n\")\n</pre> filename = 'data/programming.txt'  with open(filename, 'a') as file_object:     file_object.write(\"I also love finding meaning in large datasets.\\n\")     file_object.write(\"I love creating apps that can run in a browser.\\n\") <p>Note: When try to use the append function ('a' mode), if you don't specify you want a new line using the \"\\n\" at the beginning of the line, it will utomatically added after the last sentence without creating a new line.</p> In\u00a0[23]: Copied! <pre>import leafmap\n</pre> import leafmap In\u00a0[24]: Copied! <pre>leafmap.download_file(\"https://raw.githubusercontent.com/zyang91/GEOG-510/main/docs/python/data/pi_digits.txt\")\n</pre> leafmap.download_file(\"https://raw.githubusercontent.com/zyang91/GEOG-510/main/docs/python/data/pi_digits.txt\") <pre>Downloading...\nFrom: https://raw.githubusercontent.com/zyang91/GEOG-510/main/docs/python/data/pi_digits.txt\nTo: C:\\Users\\zyang\\GEOG-510\\python_code\\pi_digits.txt\n 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                       | 41.0/58.0 [00:00&lt;00:00, 20.6kB/s]\n</pre> Out[24]: <pre>'C:\\\\Users\\\\zyang\\\\GEOG-510\\\\python_code\\\\pi_digits.txt'</pre> In\u00a0[25]: Copied! <pre>#It can download anyfile\nleafmap.download_file(\"https://raw.githubusercontent.com/opengeos/leafmap/master/examples/data/us_regions.geojson\")\n</pre> #It can download anyfile leafmap.download_file(\"https://raw.githubusercontent.com/opengeos/leafmap/master/examples/data/us_regions.geojson\") <pre>Downloading...\nFrom: https://raw.githubusercontent.com/opengeos/leafmap/master/examples/data/us_regions.geojson\nTo: C:\\Users\\zyang\\GEOG-510\\python_code\\us_regions.geojson\n208kB [00:00, 895kB/s]                                                                                                 \n</pre> Out[25]: <pre>'C:\\\\Users\\\\zyang\\\\GEOG-510\\\\python_code\\\\us_regions.geojson'</pre> In\u00a0[1]: Copied! <pre>try:\n    print(5/0)\nexcept ZeroDivisionError:\n    print(\"You can't divide by zero!\")\n</pre> try:     print(5/0) except ZeroDivisionError:     print(\"You can't divide by zero!\") <pre>You can't divide by zero!\n</pre> In\u00a0[3]: Copied! <pre>5/0  #division by zero\n</pre> 5/0  #division by zero <pre>\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 5/0  #division by zero\n\nZeroDivisionError: division by zero</pre> <p>We put print(5/0), the line that caused the error, inside a try block. If the code in a try block works, Python skips over the except block. If the code in the try block causes an error, Python looks for an except block whose error matches the one that was raised and runs the code in that block.</p> <p>In this example, the code in the try block produces a ZeroDivisionError, so Python looks for an except block telling it how to respond. Python then runs the code in that block, and the user sees a friendly error message instead of a traceback:</p> <pre><code>You can't divide by zero!\n</code></pre> <p>If more code followed the try-except block, the program would continue running because we told Python how to handle the error. Let\u2019s look at an example where catching an error can allow a program to continue running.</p> In\u00a0[4]: Copied! <pre>print(\"Give me two numbers, and I'll divide them.\")\nprint(\"Enter 'q' to quit.\")\n\nwhile True:\n    first_number = input(\"\\nFirst number: \")\n    if first_number == 'q':\n        break\n    second_number = input(\"Second number: \")\n    if second_number == 'q':\n        break\n    try:\n        answer = int(first_number) / int(second_number)\n    except ZeroDivisionError:\n        print(\"You can't divide by 0!\")\n    else:\n        print(answer)\n</pre> print(\"Give me two numbers, and I'll divide them.\") print(\"Enter 'q' to quit.\")  while True:     first_number = input(\"\\nFirst number: \")     if first_number == 'q':         break     second_number = input(\"Second number: \")     if second_number == 'q':         break     try:         answer = int(first_number) / int(second_number)     except ZeroDivisionError:         print(\"You can't divide by 0!\")     else:         print(answer) <pre>Give me two numbers, and I'll divide them.\nEnter 'q' to quit.\n\nFirst number:  2\nSecond number:  3\n0.6666666666666666\n\nFirst number:  1\nSecond number:  3\n0.3333333333333333\n\nFirst number:  1\nSecond number:  0\nYou can't divide by 0!\n\nFirst number:  q\n</pre> In\u00a0[5]: Copied! <pre>print(\"Give me two numbers, and I'll divide them.\")\nprint(\"Enter 'q' to quit.\")\n\nwhile True:\n    first_number = input(\"\\nFirst number: \")\n    if first_number == 'q':\n        break\n    second_number = input(\"Second number: \")\n    if second_number == 'q':\n        break\n    try:\n        answer = int(first_number) / int(second_number)\n    except ValueError:\n        print('You must enter a mumber')\n    except ZeroDivisionError:\n        print(\"You can't divide by 0!\")\n    else:\n        print(answer)\n</pre> print(\"Give me two numbers, and I'll divide them.\") print(\"Enter 'q' to quit.\")  while True:     first_number = input(\"\\nFirst number: \")     if first_number == 'q':         break     second_number = input(\"Second number: \")     if second_number == 'q':         break     try:         answer = int(first_number) / int(second_number)     except ValueError:         print('You must enter a mumber')     except ZeroDivisionError:         print(\"You can't divide by 0!\")     else:         print(answer) <pre>Give me two numbers, and I'll divide them.\nEnter 'q' to quit.\n\nFirst number:  ggg\nSecond number:  gg\nYou must enter a mumber\n\nFirst number:  q\n</pre> In\u00a0[7]: Copied! <pre>print(\"Give me two numbers, and I'll divide them.\")\nprint(\"Enter 'q' to quit.\")\n\nwhile True:\n    first_number = input(\"\\nFirst number: \")\n    if first_number == 'q':\n        break\n    second_number = input(\"Second number: \")\n    if second_number == 'q':\n        break\n    try:\n        answer = int(first_number) / int(second_number)\n    except:\n        print(\"Somethong went wrong\")\n    else:\n        print(answer)\n</pre> print(\"Give me two numbers, and I'll divide them.\") print(\"Enter 'q' to quit.\")  while True:     first_number = input(\"\\nFirst number: \")     if first_number == 'q':         break     second_number = input(\"Second number: \")     if second_number == 'q':         break     try:         answer = int(first_number) / int(second_number)     except:         print(\"Somethong went wrong\")     else:         print(answer) <pre>Give me two numbers, and I'll divide them.\nEnter 'q' to quit.\n\nFirst number:  g\nSecond number:  g\nSomethong went wrong\n\nFirst number:  q\n</pre> In\u00a0[13]: Copied! <pre>#know the error type\nprint(\"Give me two numbers, and I'll divide them.\")\nprint(\"Enter 'q' to quit.\")\n\nwhile True:\n    first_number = input(\"\\nFirst number: \")\n    if first_number == 'q':\n        break\n    second_number = input(\"Second number: \")\n    if second_number == 'q':\n        break\n    try:\n        answer = int(first_number) / int(second_number)\n    except Exception as e:\n        print(e)\n    else:\n        print(answer)\n</pre> #know the error type print(\"Give me two numbers, and I'll divide them.\") print(\"Enter 'q' to quit.\")  while True:     first_number = input(\"\\nFirst number: \")     if first_number == 'q':         break     second_number = input(\"Second number: \")     if second_number == 'q':         break     try:         answer = int(first_number) / int(second_number)     except Exception as e:         print(e)     else:         print(answer) <pre>Give me two numbers, and I'll divide them.\nEnter 'q' to quit.\n\nFirst number:  78\nSecond number:  9\n8.666666666666666\n\nFirst number:  89\nSecond number:  0\ndivision by zero\n\nFirst number:  88\nSecond number:  hh\ninvalid literal for int() with base 10: 'hh'\n\nFirst number:  q\n</pre> <p>The try-except-else block works like this: Python attempts to run the code in the try block. The only code that should go in a try block is code that might cause an exception to be raised. Sometimes you\u2019ll have additional code that should run only if the try block was successful; this code goes in the else block. The except block tells Python what to do in case a certain exception arises when it tries to run the code in the try block. By anticipating likely sources of errors, you can write robust programs that continue to run even when they encounter invalid data and missing resources. Your code will be resistant to innocent user mistakes and malicious attacks.</p> In\u00a0[8]: Copied! <pre>filename = 'alice.txt'\n\nwith open(filename, encoding='utf-8') as f:\n    contents = f.read()\n</pre> filename = 'alice.txt'  with open(filename, encoding='utf-8') as f:     contents = f.read() <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[8], line 3\n      1 filename = 'alice.txt'\n----&gt; 3 with open(filename, encoding='utf-8') as f:\n      4     contents = f.read()\n\nFile ~\\miniconda3\\envs\\geos\\lib\\site-packages\\IPython\\core\\interactiveshell.py:282, in _modified_open(file, *args, **kwargs)\n    275 if file in {0, 1, 2}:\n    276     raise ValueError(\n    277         f\"IPython won't let you open fd={file} by default \"\n    278         \"as it is likely to crash IPython. If you know what you are doing, \"\n    279         \"you can use builtins' open.\"\n    280     )\n--&gt; 282 return io_open(file, *args, **kwargs)\n\nFileNotFoundError: [Errno 2] No such file or directory: 'alice.txt'</pre> In\u00a0[10]: Copied! <pre>filename = 'alice.txt'\ntry:\n    with open(filename, encoding='utf-8') as f:\n        contents = f.read()\nexcept FileNotFoundError:\n    print(f\"Sorry, the file {filename} does not exist.\")\n</pre> filename = 'alice.txt' try:     with open(filename, encoding='utf-8') as f:         contents = f.read() except FileNotFoundError:     print(f\"Sorry, the file {filename} does not exist.\") <pre>Sorry, the file alice.txt does not exist.\n</pre> In\u00a0[11]: Copied! <pre>title = \"Alice in Wonderland\"\ntitle.split()\n</pre> title = \"Alice in Wonderland\" title.split() Out[11]: <pre>['Alice', 'in', 'Wonderland']</pre> <p>The split() method separates a string into parts wherever it finds a space and stores all the parts of the string in a list. The result is a list of words from the string, although some punctuation may also appear with some of the words. To count the number of words in Alice in Wonderland, we\u2019ll use split() on the entire text. Then we\u2019ll count the items in the list to get a rough idea of the number of words in the text:</p> In\u00a0[12]: Copied! <pre>filename = 'data/alice.txt'\n\ntry:\n    with open(filename, encoding='utf-8') as f:\n        contents = f.read()\nexcept FileNotFoundError:\n    print(f\"Sorry, the file {filename} does not exist.\")\nelse:\n    # Count the approximate number of words in the file.\n    words = contents.split()\n    num_words = len(words)\n    print(f\"The file {filename} has about {num_words} words.\")\n</pre> filename = 'data/alice.txt'  try:     with open(filename, encoding='utf-8') as f:         contents = f.read() except FileNotFoundError:     print(f\"Sorry, the file {filename} does not exist.\") else:     # Count the approximate number of words in the file.     words = contents.split()     num_words = len(words)     print(f\"The file {filename} has about {num_words} words.\") <pre>The file data/alice.txt has about 29465 words.\n</pre> In\u00a0[36]: Copied! <pre>filename = 'data/alice.txt'\n\ntry:\n    with open(filename, encoding='utf-8') as f:\n        contents = f.read()\nexcept FileNotFoundError:\n    print(f\"Sorry, the file {filename} does not exist.\")\nelse:\n    # Count the approximate number of words in the file.\n    words = contents.split()\n    num_words = len(set(words)) #unique words\n    print(f\"The file {filename} has about {num_words} words.\")\n</pre> filename = 'data/alice.txt'  try:     with open(filename, encoding='utf-8') as f:         contents = f.read() except FileNotFoundError:     print(f\"Sorry, the file {filename} does not exist.\") else:     # Count the approximate number of words in the file.     words = contents.split()     num_words = len(set(words)) #unique words     print(f\"The file {filename} has about {num_words} words.\") <pre>The file data/alice.txt has about 6018 words.\n</pre>"},{"location":"python/files_and_exception_handling/#files-and-exceptions","title":"Files and Exceptions\u00b6","text":"<p>Now that you\u2019ve mastered the basic skills you need to write organized programs that are easy to use, it\u2019s time to think about making your programs even more relevant and usable. In this chapter you\u2019ll learn to work with files so your programs can quickly analyze lots of data. You\u2019ll learn to handle errors so your programs don\u2019t crash when they encounter unexpected situations. You\u2019ll learn about exceptions, which are special objects Python creates to manage errors that arise while a program is running. You\u2019ll also learn about the json module, which allows you to save user data so it isn\u2019t lost when your program stops running.</p> <p>Learning to work with files and save data will make your programs easier for people to use. Users will be able to choose what data to enter and when to enter it. People can run your program, do some work, and then close the program and pick up where they left off later. Learning to handle exceptions will help you deal with situations in which files don\u2019t exist and deal with other problems that can cause your programs to crash. This will make your programs more robust when they encounter bad data, whether it comes from innocent mistakes or from malicious attempts to break your programs. With the skills you\u2019ll learn in this chapter, you\u2019ll make your programs more applicable, usable, and stable.</p>"},{"location":"python/files_and_exception_handling/#reading-from-a-file","title":"READING FROM A FILE\u00b6","text":"<p>An incredible amount of data is available in text files. Text files can contain weather data, traffic data, socioeconomic data, literary works, and more. Reading from a file is particularly useful in data analysis applications, but it\u2019s also applicable to any situation in which you want to analyze or modify information stored in a file. For example, you can write a program that reads in the contents of a text file and rewrites the file with formatting that allows a browser to display it.</p> <p>When you want to work with the information in a text file, the first step is to read the file into memory. You can read the entire contents of a file, or you can work through the file one line at a time.</p>"},{"location":"python/files_and_exception_handling/#reading-an-entire-file","title":"Reading an Entire File\u00b6","text":"<p>To begin, we need a file with a few lines of text in it. Let\u2019s start with a file that contains pi to 30 decimal places, with 10 decimal places per line:</p> <pre><code>pi_digits.txt\n\n3.1415926535\n\u00a0\u00a08979323846\n\u00a0\u00a02643383279\n</code></pre> <p>All the files used in this lecture can be found under the data folder.</p> <p>Here\u2019s a program that opens this file, reads it, and prints the contents of the file to the screen:</p>"},{"location":"python/files_and_exception_handling/#difference-between-relative-file-path-and-absolute-file-path","title":"Difference between relative file path and absolute file path\u00b6","text":"<p>'data/pi_digits.txt' this file path is so called relative file path, which means this file path is relative to this notebook location. Under the same folder. For the software development, you should use the relative directories. Don't use abslute directories  \"C:\\Users\\zyang\\OneDrive\\\u684c\u9762\\ee.txt\" this is an absolute file path, which mean directly from your computer. Windows use '/' in file path. Mac and Linux uses \"\" in file path. Personal information, and the absolute file path different between different computer</p>"},{"location":"python/files_and_exception_handling/#file-paths","title":"File Paths\u00b6","text":"<p>When you pass a simple filename like pi_digits.txt to the open() function, Python looks in the directory where the file that\u2019s currently being executed (that is, your .py program file) is stored.</p> <p>Sometimes, depending on how you organize your work, the file you want to open won\u2019t be in the same directory as your program file. For example, you might store your program files in a folder called python_work; inside python_work, you might have another folder called text_files to distinguish your program files from the text files they\u2019re manipulating. Even though text_files is in python_work, just passing open() the name of a file in text_files won\u2019t work, because Python will only look in python_work and stop there; it won\u2019t go on and look in text_files. To get Python to open files from a directory other than the one where your program file is stored, you need to provide a file path, which tells Python to look in a specific location on your system.</p> <p>Because text_files is inside python_work, you could use a relative file path to open a file from text_files. A relative file path tells Python to look for a given location relative to the directory where the currently running program file is stored. For example, you\u2019d write:</p> <pre><code>with open('text_files/filename.txt') as file_object:\n</code></pre> <p>This line tells Python to look for the desired .txt file in the folder text_files and assumes that text_files is located inside python_work (which it is).</p> <p>Windows systems use a backslash () instead of a forward slash (/) when displaying file paths, but you can still *use forward slashes in your code.\\</p> <p>You can also tell Python exactly where the file is on your computer regardless of where the program that\u2019s being executed is stored. This is called an absolute file path. You use an absolute path if a relative path doesn\u2019t work. For instance, if you\u2019ve put text_files in some folder other than python_work\u2014say, a folder called other_files\u2014then just passing open() the path 'text_files/filename.txt' won\u2019t work because Python will only look for that location inside python_work. You\u2019ll need to write out a full path to clarify where you want Python to look.</p> <p>Absolute paths are usually longer than relative paths, so it\u2019s helpful to assign them to a variable and then pass that variable to open():</p> <pre><code>file_path = '/home/ehmatthes/other_files/text_files/filename.txt'\nwith open(file_path) as file_object:\n</code></pre> <p>Using absolute paths, you can read files from any location on your system. For now it\u2019s easiest to store files in the same directory as your program files or in a folder such as text_files within the directory that stores your program files.</p> <p>If you try to use backslashes in a file path, you\u2019ll get an error because the backslash is used to escape characters in strings. For example, in the path \"C:\\path\\to\\file.txt\", the sequence \\t is interpreted as a tab. If you need to use backslashes, you can escape each one in the path, like this: \"C:\\\\path\\\\to\\\\file.txt\".</p>"},{"location":"python/files_and_exception_handling/#reading-line-by-line","title":"Reading Line by Line\u00b6","text":"<p>When you\u2019re reading a file, you\u2019ll often want to examine each line of the file. You might be looking for certain information in the file, or you might want to modify the text in the file in some way. For example, you might want to read through a file of weather data and work with any line that includes the word sunny in the description of that day\u2019s weather. In a news report, you might look for any line with the tag <code>&lt;headline&gt;</code> and rewrite that line with a specific kind of formatting.</p> <p>You can use a for loop on the file object to examine each line from a file one at a time:</p>"},{"location":"python/files_and_exception_handling/#making-a-list-of-lines-from-a-file","title":"Making a List of Lines from a File\u00b6","text":"<p>When you use with, the file object returned by open() is only available inside the with block that contains it. If you want to retain access to a file\u2019s contents outside the with block, you can store the file\u2019s lines in a list inside the block and then work with that list. You can process parts of the file immediately and postpone some processing for later in the program.</p> <p>The following example stores the lines of pi_digits.txt in a list inside the with block and then prints the lines outside the with block:</p>"},{"location":"python/files_and_exception_handling/#working-with-a-files-contents","title":"Working with a File\u2019s Contents\u00b6","text":"<p>After you\u2019ve read a file into memory, you can do whatever you want with that data, so let\u2019s briefly explore the digits of pi. First, we\u2019ll attempt to build a single string containing all the digits in the file with no whitespace in it:</p>"},{"location":"python/files_and_exception_handling/#large-files-one-million-digits","title":"Large Files: One Million Digits\u00b6","text":"<p>So far we\u2019ve focused on analyzing a text file that contains only three lines, but the code in these examples would work just as well on much larger files. If we start with a text file that contains pi to 1,000,000 decimal places instead of just 30, we can create a single string containing all these digits. We don\u2019t need to change our program at all except to pass it a different file. We\u2019ll also print just the first 50 decimal places, so we don\u2019t have to watch a million digits scroll by in the terminal:</p>"},{"location":"python/files_and_exception_handling/#is-your-birthday-contained-in-pi","title":"Is Your Birthday Contained in Pi?\u00b6","text":"<p>I\u2019ve always been curious to know if my birthday appears anywhere in the digits of pi. Let\u2019s use the program we just wrote to find out if someone\u2019s birthday appears anywhere in the first million digits of pi. We can do this by expressing each birthday as a string of digits and seeing if that string appears anywhere in pi_string:</p>"},{"location":"python/files_and_exception_handling/#writing-to-a-file","title":"WRITING TO A FILE \u00b6","text":"<p>One of the simplest ways to save data is to write it to a file. When you write text to a file, the output will still be available after you close the terminal containing your program\u2019s output. You can examine output after a program finishes running, and you can share the output files with others as well. You can also write programs that read the text back into memory and work with it again later.</p>"},{"location":"python/files_and_exception_handling/#writing-to-an-empty-file","title":"Writing to an Empty File\u00b6","text":"<p>To write text to a file, you need to call open() with a second argument telling Python that you want to write to the file. To see how this works, let\u2019s write a simple message and store it in a file instead of printing it to the screen:</p>"},{"location":"python/files_and_exception_handling/#writing-multiple-lines","title":"Writing Multiple Lines\u00b6","text":"<p>The write() function doesn\u2019t add any newlines to the text you write. So if you write more than one line without including newline characters, your file may not look the way you want it to:</p>"},{"location":"python/files_and_exception_handling/#appending-to-a-file","title":"Appending to a File\u00b6","text":"<p>If you want to add content to a file instead of writing over existing content, you can open the file in append mode. When you open a file in append mode, Python doesn\u2019t erase the contents of the file before returning the file object. Any lines you write to the file will be added at the end of the file. If the file doesn\u2019t exist yet, Python will create an empty file for you.</p> <p>Let\u2019s modify the program by adding some new reasons we love programming to the existing file programming.txt:</p>"},{"location":"python/files_and_exception_handling/#leafmap-usage","title":"leafmap usage\u00b6","text":"<p>using leafmap download file function to download files</p> <ul> <li>it can be anyfiles</li> <li>from anywhere on the Internet (github, google drive)</li> </ul>"},{"location":"python/files_and_exception_handling/#exceptions","title":"EXCEPTIONS \u00b6","text":"<p>Python uses special objects called exceptions to manage errors that arise during a program\u2019s execution. Whenever an error occurs that makes Python unsure what to do next, it creates an exception object. If you write code that handles the exception, the program will continue running. If you don\u2019t handle the exception, the program will halt and show a traceback, which includes a report of the exception that was raised.</p> <p>Exceptions are handled with try-except blocks. A try-except block asks Python to do something, but it also tells Python what to do if an exception is raised. When you use try-except blocks, your programs will continue running even if things start to go wrong. Instead of tracebacks, which can be confusing for users to read, users will see friendly error messages that you write.</p>"},{"location":"python/files_and_exception_handling/#using-try-except-blocks","title":"Using try-except Blocks\u00b6","text":"<p>When you think an error may occur, you can write a try-except block to handle the exception that might be raised. You tell Python to try running some code, and you tell it what to do if the code results in a particular kind of exception.</p> <p>Here\u2019s what a try-except block for handling the ZeroDivisionError exception looks like:</p>"},{"location":"python/files_and_exception_handling/#using-exceptions-to-prevent-crashes","title":"Using Exceptions to Prevent Crashes\u00b6","text":"<p>Handling errors correctly is especially important when the program has more work to do after the error occurs. This happens often in programs that prompt users for input. If the program responds to invalid input appropriately, it can prompt for more valid input instead of crashing.</p> <p>Let\u2019s create a simple calculator that does only division:</p>"},{"location":"python/files_and_exception_handling/#handling-the-filenotfounderror-exception","title":"Handling the FileNotFoundError Exception\u00b6","text":"<p>One common issue when working with files is handling missing files. The file you\u2019re looking for might be in a different location, the filename may be misspelled, or the file may not exist at all. You can handle all of these situations in a straightforward way with a try-except block.</p> <p>Let\u2019s try to read a file that doesn\u2019t exist. The following program tries to read in the contents of Alice in Wonderland, but I haven\u2019t saved the file alice.txt in the same directory as alice.py:</p>"},{"location":"python/files_and_exception_handling/#analyzing-text","title":"Analyzing Text\u00b6","text":"<p>You can analyze text files containing entire books. Many classic works of literature are available as simple text files because they are in the public domain. The texts used in this section come from Project Gutenberg (http://gutenberg.org/). Project Gutenberg maintains a collection of literary works that are available in the public domain, and it\u2019s a great resource if you\u2019re interested in working with literary texts in your programming projects.</p> <p>Let\u2019s pull in the text of Alice in Wonderland and try to count the number of words in the text. We\u2019ll use the string method split(), which can build a list of words from a string. Here\u2019s what split() does with a string containing just the title \"Alice in Wonderland\":</p>"},{"location":"python/files_and_exception_handling/#finish","title":"Finish\u00b6","text":""},{"location":"python/files_and_exception_handling/#references","title":"References\u00b6","text":"<ul> <li>Matthes, Eric (2022). Python Crash Course, 3rd Edition: A Hands-On, Project-Based Introduction to Programming. No Starch Press. ISBN: 978-1593279288. (Publisher website)</li> <li>Dr.Qiusheng Wu online lecture</li> </ul>"},{"location":"python/first/","title":"First lecture","text":"<p>Zhanchao Yang</p> In\u00a0[1]: Copied! <pre>message= \"Hello Python World\"\nprint(message)\n</pre> message= \"Hello Python World\" print(message) <pre>Hello Python World\n</pre> In\u00a0[2]: Copied! <pre>message\n</pre> message Out[2]: <pre>'Hello Python World'</pre> In\u00a0[3]: Copied! <pre>message= \"hello world\"\nmessage\n</pre> message= \"hello world\" message Out[3]: <pre>'hello world'</pre> In\u00a0[4]: Copied! <pre>print(mesage)\n</pre> print(mesage) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 print(mesage)\n\nNameError: name 'mesage' is not defined</pre> In\u00a0[6]: Copied! <pre>name= 'zhanchao yang'\nprint(name.title())\n</pre> name= 'zhanchao yang' print(name.title()) <pre>Zhanchao Yang\n</pre> In\u00a0[7]: Copied! <pre>name.capitalize()\n</pre> name.capitalize() Out[7]: <pre>'Zhanchao yang'</pre> In\u00a0[8]: Copied! <pre>name.title()\n</pre> name.title() Out[8]: <pre>'Zhanchao Yang'</pre> In\u00a0[10]: Copied! <pre>name.upper()\n</pre> name.upper() Out[10]: <pre>'ZHANCHAO YANG'</pre> In\u00a0[11]: Copied! <pre>name.lower()\n</pre> name.lower() Out[11]: <pre>'zhanchao yang'</pre> In\u00a0[15]: Copied! <pre>first_name=\"zhanchao\"\nlast_name=\"yang\"\nfull_name= f\"{first_name} {last_name}\"\nprint(full_name.title())\n</pre> first_name=\"zhanchao\" last_name=\"yang\" full_name= f\"{first_name} {last_name}\" print(full_name.title()) <pre>Zhanchao Yang\n</pre> In\u00a0[16]: Copied! <pre>message = f\"Hello, {full_name.title()}!\"\nprint(message)\n</pre> message = f\"Hello, {full_name.title()}!\" print(message) <pre>Hello, Zhanchao Yang!\n</pre> In\u00a0[17]: Copied! <pre>full_name=\"{} {}\".format(first_name, last_name)\n</pre>  full_name=\"{} {}\".format(first_name, last_name) In\u00a0[18]: Copied! <pre>full_name\n</pre> full_name Out[18]: <pre>'zhanchao yang'</pre> In\u00a0[20]: Copied! <pre>print(\"Hello\")\nprint(\"\\tHello\")\n</pre> print(\"Hello\") print(\"\\tHello\") <pre>Hello\n\tHello\n</pre> In\u00a0[21]: Copied! <pre>print(\"\\t\\t\\tHello\")\n</pre> print(\"\\t\\t\\tHello\") <pre>\t\t\tHello\n</pre> In\u00a0[23]: Copied! <pre>filepath=r'D:\\GEOG445'\nfilepath\n</pre> filepath=r'D:\\GEOG445' filepath Out[23]: <pre>'D:\\\\GEOG445'</pre> In\u00a0[25]: Copied! <pre>print(\"laguage:\\n\\tpython\\n\\tJavascript\")\n</pre> print(\"laguage:\\n\\tpython\\n\\tJavascript\") <pre>laguage:\n\tpython\n\tJavascript\n</pre> In\u00a0[32]: Copied! <pre>favorite_language= ' python  Zhanchao'\n</pre> favorite_language= ' python  Zhanchao' In\u00a0[33]: Copied! <pre>print(favorite_language)\n</pre> print(favorite_language) <pre> python  Zhanchao\n</pre> In\u00a0[34]: Copied! <pre>print(favorite_language.rstrip())\n</pre> print(favorite_language.rstrip()) <pre> python  Zhanchao\n</pre> In\u00a0[35]: Copied! <pre>print(favorite_language.lstrip())\n</pre> print(favorite_language.lstrip()) <pre>python  Zhanchao\n</pre> In\u00a0[36]: Copied! <pre>print(favorite_language.strip())\n</pre> print(favorite_language.strip()) <pre>python  Zhanchao\n</pre> In\u00a0[37]: Copied! <pre>text = 'Extra whitespace can be confusing in your programs.'\n</pre> text = 'Extra whitespace can be confusing in your programs.' In\u00a0[38]: Copied! <pre>text.replace(' ','')\n</pre> text.replace(' ','') Out[38]: <pre>'Extrawhitespacecanbeconfusinginyourprograms.'</pre> In\u00a0[39]: Copied! <pre>favorite_language.replace(' ','')\n</pre> favorite_language.replace(' ','') Out[39]: <pre>'pythonZhanchao'</pre> In\u00a0[40]: Copied! <pre>text.replace(' ','-')\n</pre> text.replace(' ','-') Out[40]: <pre>'Extra-whitespace-can-be-confusing-in-your-programs.'</pre> In\u00a0[41]: Copied! <pre># double quote, with single quote inside, it will work\n# escape sign also work\n</pre> # double quote, with single quote inside, it will work # escape sign also work In\u00a0[43]: Copied! <pre>message='one of python's strength'\n</pre> message='one of python's strength' <pre>\n  Cell In[43], line 1\n    message='one of python's strength'\n                           ^\nSyntaxError: invalid syntax\n</pre> In\u00a0[45]: Copied! <pre>message='one of python\\'s strength'\nmessage\n</pre> message='one of python\\'s strength' message Out[45]: <pre>\"one of python's strength\"</pre> In\u00a0[46]: Copied! <pre>message=\"one of python's strength\"\nmessage\n</pre> message=\"one of python's strength\" message Out[46]: <pre>\"one of python's strength\"</pre> In\u00a0[47]: Copied! <pre># just as calculator\n</pre> # just as calculator In\u00a0[48]: Copied! <pre>2 + 3\n</pre> 2 + 3 Out[48]: <pre>5</pre> In\u00a0[49]: Copied! <pre>0.1+0.1\n</pre> 0.1+0.1 Out[49]: <pre>0.2</pre> In\u00a0[50]: Copied! <pre>2*0.2\n# automatic converted another type of data to another\n# integer to float\n</pre> 2*0.2 # automatic converted another type of data to another # integer to float Out[50]: <pre>0.4</pre> In\u00a0[51]: Copied! <pre>2*'50'\n# 2 multiplied string\n# don't work\n</pre> 2*'50' # 2 multiplied string # don't work Out[51]: <pre>'5050'</pre> In\u00a0[52]: Copied! <pre>2* int('50')\n# convert string to number\n</pre> 2* int('50') # convert string to number Out[52]: <pre>100</pre> In\u00a0[53]: Copied! <pre>universe_age=124_000_000\n</pre> universe_age=124_000_000 In\u00a0[54]: Copied! <pre>universe_age\n</pre> universe_age Out[54]: <pre>124000000</pre> In\u00a0[56]: Copied! <pre># won't work with comma\na=1,0000\na\n</pre> # won't work with comma a=1,0000 a Out[56]: <pre>(1, 0)</pre> In\u00a0[60]: Copied! <pre>x = 0\ny = 1\nx = 3 * y\nx\n</pre> x = 0 y = 1 x = 3 * y x Out[60]: <pre>3</pre> In\u00a0[61]: Copied! <pre># must be paired up\nx,y,z=1,2,3\n</pre> # must be paired up x,y,z=1,2,3 In\u00a0[62]: Copied! <pre># y=5\n</pre> # y=5"},{"location":"python/first/#first-lecture","title":"First lecture\u00b6","text":""},{"location":"python/first/#variables-and-date-types","title":"Variables and Date Types\u00b6","text":""},{"location":"python/first/#avoid-name-errors","title":"Avoid Name errors\u00b6","text":""},{"location":"python/first/#changing-case-in-a-string-with-methods","title":"Changing Case in a String with Methods\u00b6","text":"<p>One of the simplest tasks you can do with strings is change the case of the words in a string. Look at the following code, and try to determine what\u2019s happening:</p>"},{"location":"python/first/#adding-whitespace-to-strings-with-tabs-or-newlines","title":"Adding Whitespace to Strings with Tabs or Newlines\u00b6","text":"<p>In programming, whitespace refers to any nonprinting character, such as spaces, tabs, and end-of-line symbols. You can use whitespace to organize your output so it\u2019s easier for users to read. To add a tab to your text, use the character combination \\t as shown at:</p>"},{"location":"python/first/#stripping-whitespace","title":"Stripping Whitespace\u00b6","text":"<p>Extra whitespace can be confusing in your programs. To programmers 'python' and 'python ' look pretty much the same. But to a program, they are two different strings. Python detects the extra space in 'python ' and considers it significant unless you tell it otherwise. whitespace from data that people enter. Python can look for extra whitespace on the right and left sides of a string. To ensure that no whitespace exists at the right end of a string, use the rstrip() method.</p>"},{"location":"python/first/#avoiding-syntax-errors-with-strings","title":"Avoiding Syntax Errors with Strings\u00b6","text":"<p>One kind of error that you might see with some regularity is a syntax error. A syntax error occurs when Python doesn\u2019t recognize a section of your pro gram as valid Python code. For example, if you use an apostrophe within single quotes, you\u2019ll produce an error. This happens because Python interprets everything between the first single quote and the apostrophe as a string. It then tries to interpret the rest of the text as Python code, which causes errors.</p>"},{"location":"python/first/#integers","title":"Integers\u00b6","text":"<p>You can add ( +), subtract ( -), multiply (*), and divide ( /) integers in Python.</p>"},{"location":"python/first/#floats","title":"Floats\u00b6","text":"<p>Python calls any number with a decimal point a float. This term is used in most programming languages, and it refers to the fact that a decimal point can appear at any position in a number. Every programming language must be carefully designed to properly manage decimal numbers so numbers behave appropriately no matter where the decimal point appears.</p>"},{"location":"python/first/#underscores-in-numbers","title":"Underscores in Numbers\u00b6","text":"<p>When you\u2019re writing long numbers, you can group digits using underscores to make large numbers more readable. When you print a number that was defined using underscores, Python prints only the digits. Python ignores the underscores when storing these kinds of values. Even if you don\u2019t group the digits in threes, the value will still be un\u00ada ffected. To Python, 1000 is the same as 1_000, which is the same as 10_00. This feature works for integers and floats, but it\u2019s only available in Python 3.6</p>"},{"location":"python/first/#multiple-assignment","title":"Multiple Assignment\u00b6","text":"<p>You can assign values to more than one variable using just a single line. This can help shorten your programs and make them easier to read; you\u2019ll use this technique most often when initializing a set of numbers.</p>"},{"location":"python/first/#comments","title":"Comments\u00b6","text":"<p>Comments are an extremely useful feature in most programming languages. Everything you\u2019ve written in your programs so far is Python code. As your programs become longer and more complicated, you should add notes within your programs that describe your overall approach to the problem you\u2019re solving. A comment allows you to write notes in English within your programs.</p>"},{"location":"python/first/#how-do-you-write-comments","title":"How Do You Write Comments?\u00b6","text":"<p>In Python, the hash mark (#) indicates a comment. Anything following a hash mark in your code is ignored by the Python interpreter. For example:</p>"},{"location":"python/first/#finish","title":"finish\u00b6","text":""},{"location":"python/first/#references","title":"References\u00b6","text":"<ul> <li>Matthes, Eric (2022). Python Crash Course, 3rd Edition: A Hands-On, Project-Based Introduction to Programming. No Starch Press. ISBN: 978-1593279288. (Publisher website)</li> <li>Dr.Qiusheng Wu online lecture</li> </ul>"},{"location":"python/function/","title":"function error","text":"In\u00a0[1]: Copied! <pre>def greet_user():\n    \"\"\"Display a simple greeting.\"\"\"\n    print(\"Hello!\")\n\ngreet_user()\n</pre> def greet_user():     \"\"\"Display a simple greeting.\"\"\"     print(\"Hello!\")  greet_user() <pre>Hello!\n</pre> In\u00a0[2]: Copied! <pre>def greet_user(username): #parameter, name doesn't matter\n    \"\"\"Display a simple greeting.\"\"\"\n    print(f\"Hello, {username.title()}!\")\n\ngreet_user('jesse')\n</pre> def greet_user(username): #parameter, name doesn't matter     \"\"\"Display a simple greeting.\"\"\"     print(f\"Hello, {username.title()}!\")  greet_user('jesse') <pre>Hello, Jesse!\n</pre> In\u00a0[3]: Copied! <pre>def describe_pet(animal_type, pet_name):\n    \"\"\"Display information about a pet.\"\"\"\n    print(f\"\\nI have a {animal_type}.\")\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n\ndescribe_pet('hamster', 'harry')\n#number of parameter must be same, sequense also be same\n</pre> def describe_pet(animal_type, pet_name):     \"\"\"Display information about a pet.\"\"\"     print(f\"\\nI have a {animal_type}.\")     print(f\"My {animal_type}'s name is {pet_name.title()}.\")  describe_pet('hamster', 'harry') #number of parameter must be same, sequense also be same <pre>\nI have a hamster.\nMy hamster's name is Harry.\n</pre> In\u00a0[4]: Copied! <pre>def describe_pet(animal_type, pet_name):\n    \"\"\"Display information about a pet.\"\"\"\n    print(f\"\\nI have a {animal_type}.\")\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n\ndescribe_pet('hamstesssr', 'harddry')\n</pre> def describe_pet(animal_type, pet_name):     \"\"\"Display information about a pet.\"\"\"     print(f\"\\nI have a {animal_type}.\")     print(f\"My {animal_type}'s name is {pet_name.title()}.\")  describe_pet('hamstesssr', 'harddry') <pre>\nI have a hamstesssr.\nMy hamstesssr's name is Harddry.\n</pre> In\u00a0[5]: Copied! <pre>def describe_pet(animal_type, pet_name):\n    \"\"\"Display information about a pet.\"\"\"\n    print(f\"\\nI have a {animal_type}.\")\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n\ndescribe_pet('hamster', 'harry')\ndescribe_pet('dog', 'willie')\n</pre> def describe_pet(animal_type, pet_name):     \"\"\"Display information about a pet.\"\"\"     print(f\"\\nI have a {animal_type}.\")     print(f\"My {animal_type}'s name is {pet_name.title()}.\")  describe_pet('hamster', 'harry') describe_pet('dog', 'willie') <pre>\nI have a hamster.\nMy hamster's name is Harry.\n\nI have a dog.\nMy dog's name is Willie.\n</pre> In\u00a0[6]: Copied! <pre>def describe_pet(animal_type, pet_name):\n    \"\"\"Display information about a pet.\"\"\"\n    print(f\"\\nI have a {animal_type}.\")\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n\ndescribe_pet('harry', 'hamster')\n</pre> def describe_pet(animal_type, pet_name):     \"\"\"Display information about a pet.\"\"\"     print(f\"\\nI have a {animal_type}.\")     print(f\"My {animal_type}'s name is {pet_name.title()}.\")  describe_pet('harry', 'hamster') <pre>\nI have a harry.\nMy harry's name is Hamster.\n</pre> In\u00a0[7]: Copied! <pre>def describe_pet(animal_type, pet_name):\n    \"\"\"Display information about a pet.\"\"\"\n    print(f\"\\nI have a {animal_type}.\")\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n\ndescribe_pet(animal_type='hamster', pet_name='harry')\n</pre> def describe_pet(animal_type, pet_name):     \"\"\"Display information about a pet.\"\"\"     print(f\"\\nI have a {animal_type}.\")     print(f\"My {animal_type}'s name is {pet_name.title()}.\")  describe_pet(animal_type='hamster', pet_name='harry') <pre>\nI have a hamster.\nMy hamster's name is Harry.\n</pre> In\u00a0[8]: Copied! <pre>describe_pet(animal_type='hamster', pet_name='harry')\ndescribe_pet(pet_name='harry', animal_type='hamster')\n</pre> describe_pet(animal_type='hamster', pet_name='harry') describe_pet(pet_name='harry', animal_type='hamster') <pre>\nI have a hamster.\nMy hamster's name is Harry.\n\nI have a hamster.\nMy hamster's name is Harry.\n</pre> In\u00a0[9]: Copied! <pre>def describe_pet(pet_name, animal_type='dog'):# default value 'dog'\n    \"\"\"Display information about a pet.\"\"\"\n    print(f\"\\nI have a {animal_type}.\")\n    print(f\"My {animal_type}'s name is {pet_name.title()}.\")\n\ndescribe_pet(pet_name='willie')\n</pre> def describe_pet(pet_name, animal_type='dog'):# default value 'dog'     \"\"\"Display information about a pet.\"\"\"     print(f\"\\nI have a {animal_type}.\")     print(f\"My {animal_type}'s name is {pet_name.title()}.\")  describe_pet(pet_name='willie') <pre>\nI have a dog.\nMy dog's name is Willie.\n</pre> In\u00a0[12]: Copied! <pre>def info(name, dept = 'geography'):\n    print(f'My name is {name.title()}.')\n    print(f'I came from {dept.title()} department.')\ninfo('Zhanchao')\n</pre> def info(name, dept = 'geography'):     print(f'My name is {name.title()}.')     print(f'I came from {dept.title()} department.') info('Zhanchao') <pre>My name is Zhanchao.\nI came from Geography department.\n</pre> In\u00a0[13]: Copied! <pre>def info(name, dept = 'geography'):\n    print(f'My name is {name.title()}.')\n    print(f'I came from {dept.title()} department.')\ninfo('Zhanchao', 'environmental studies')\n</pre> def info(name, dept = 'geography'):     print(f'My name is {name.title()}.')     print(f'I came from {dept.title()} department.') info('Zhanchao', 'environmental studies') <pre>My name is Zhanchao.\nI came from Environmental Studies department.\n</pre> In\u00a0[15]: Copied! <pre>def info(name, dept = 'geography', state = 'NY'):\n    print(f'My name is {name.title()}.')\n    print(f'I came from {dept.title()} department.')\n    print(f'I am living in {state} state.')\ninfo('Zhanchao')\n</pre> def info(name, dept = 'geography', state = 'NY'):     print(f'My name is {name.title()}.')     print(f'I came from {dept.title()} department.')     print(f'I am living in {state} state.') info('Zhanchao') <pre>My name is Zhanchao.\nI came from Geography department.\nI am living in NY state.\n</pre> In\u00a0[16]: Copied! <pre>def info(name, dept = 'geography', state = 'NY'):\n    print(f'My name is {name.title()}.')\n    print(f'I came from {dept.title()} department.')\n    print(f'I am living in {state} state.')\ninfo('Zhanchao', state = 'PA')\n# name is only useful, if you want to provide something not in regular sequence\n</pre> def info(name, dept = 'geography', state = 'NY'):     print(f'My name is {name.title()}.')     print(f'I came from {dept.title()} department.')     print(f'I am living in {state} state.') info('Zhanchao', state = 'PA') # name is only useful, if you want to provide something not in regular sequence <pre>My name is Zhanchao.\nI came from Geography department.\nI am living in PA state.\n</pre> In\u00a0[17]: Copied! <pre># doesn't work, if it does not provide specific argument. It will treat \n# with order\ndef info(name, dept = 'geography', state = 'NY'):\n    print(f'My name is {name.title()}.')\n    print(f'I came from {dept.title()} department.')\n    print(f'I am living in {state} state.')\ninfo('Zhanchao', 'PA') \n# see the different between this code and previous one\n</pre> # doesn't work, if it does not provide specific argument. It will treat  # with order def info(name, dept = 'geography', state = 'NY'):     print(f'My name is {name.title()}.')     print(f'I came from {dept.title()} department.')     print(f'I am living in {state} state.') info('Zhanchao', 'PA')  # see the different between this code and previous one <pre>My name is Zhanchao.\nI came from Pa department.\nI am living in NY state.\n</pre> In\u00a0[18]: Copied! <pre>def info(name, dept = 'geography', state = 'NY', major):\n    print(f'My name is {name.title()}.')\n    print(f'I came from {dept.title()} department.')\n    print(f'I am living in {state} state.')\n    print(f'My major is {major.title()}.')\ninfo('Zhanchao', 'geography')\n</pre> def info(name, dept = 'geography', state = 'NY', major):     print(f'My name is {name.title()}.')     print(f'I came from {dept.title()} department.')     print(f'I am living in {state} state.')     print(f'My major is {major.title()}.') info('Zhanchao', 'geography') <pre>\n  Cell In[18], line 1\n    def info(name, dept = 'geography', state = 'NY', major):\n                                                          ^\nSyntaxError: non-default argument follows default argument\n</pre> In\u00a0[19]: Copied! <pre># requirement must come first and optional come second\ndef info(name, major, dept = 'geography', state = 'NY'):\n    print(f'My name is {name.title()}.')\n    print(f'I came from {dept.title()} department.')\n    print(f'I am living in {state} state.')\n    print(f'My major is {major.title()}.')\ninfo('Zhanchao', 'geography')\n</pre> # requirement must come first and optional come second def info(name, major, dept = 'geography', state = 'NY'):     print(f'My name is {name.title()}.')     print(f'I came from {dept.title()} department.')     print(f'I am living in {state} state.')     print(f'My major is {major.title()}.') info('Zhanchao', 'geography') <pre>My name is Zhanchao.\nI came from Geography department.\nI am living in NY state.\nMy major is Geography.\n</pre> In\u00a0[20]: Copied! <pre>def info(name, major, dept = 'geography', state = 'NY'):\n    print(f'My name is {name.title()}.')\n    print(f'I came from {dept.title()} department.')\n    print(f'I am living in {state} state.')\n    print(f'My major is {major.title()}.')\ninfo('Zhanchao', 'geography', state = 'CA')\n</pre> def info(name, major, dept = 'geography', state = 'NY'):     print(f'My name is {name.title()}.')     print(f'I came from {dept.title()} department.')     print(f'I am living in {state} state.')     print(f'My major is {major.title()}.') info('Zhanchao', 'geography', state = 'CA') <pre>My name is Zhanchao.\nI came from Geography department.\nI am living in CA state.\nMy major is Geography.\n</pre> In\u00a0[21]: Copied! <pre># A dog named Willie.\ndescribe_pet('willie')\ndescribe_pet(pet_name='willie')\n\n# A hamster named Harry.\ndescribe_pet('harry', 'hamster')\ndescribe_pet(pet_name='harry', animal_type='hamster')\ndescribe_pet(animal_type='hamster', pet_name='harry')\n</pre> # A dog named Willie. describe_pet('willie') describe_pet(pet_name='willie')  # A hamster named Harry. describe_pet('harry', 'hamster') describe_pet(pet_name='harry', animal_type='hamster') describe_pet(animal_type='hamster', pet_name='harry') <pre>\nI have a dog.\nMy dog's name is Willie.\n\nI have a dog.\nMy dog's name is Willie.\n\nI have a hamster.\nMy hamster's name is Harry.\n\nI have a hamster.\nMy hamster's name is Harry.\n\nI have a hamster.\nMy hamster's name is Harry.\n</pre> In\u00a0[24]: Copied! <pre>def get_formatted_name(first_name, last_name):\n    \"\"\"Return a full name, neatly formatted.\"\"\"\n    full_name = f\"{first_name} {last_name}\"\n    return full_name.title()\n\n# Return must be the last line of code in the function. \n# Any codes after return will not be executed.\n\nmusician = get_formatted_name('jimi', 'hendrix')\nprint(musician)\n</pre> def get_formatted_name(first_name, last_name):     \"\"\"Return a full name, neatly formatted.\"\"\"     full_name = f\"{first_name} {last_name}\"     return full_name.title()  # Return must be the last line of code in the function.  # Any codes after return will not be executed.  musician = get_formatted_name('jimi', 'hendrix') print(musician) <pre>Jimi Hendrix\n</pre> In\u00a0[23]: Copied! <pre>def get_formatted_name(first_name, last_name):\n    \"\"\"Return a full name, neatly formatted.\"\"\"\n    full_name = f\"{first_name} {last_name}\"\n    \n# if there is no return within the function. There will be nothing left\n# and cannot be assigned into a variable\n\nmusician = get_formatted_name('jimi', 'hendrix')\nprint(musician)\n</pre> def get_formatted_name(first_name, last_name):     \"\"\"Return a full name, neatly formatted.\"\"\"     full_name = f\"{first_name} {last_name}\"      # if there is no return within the function. There will be nothing left # and cannot be assigned into a variable  musician = get_formatted_name('jimi', 'hendrix') print(musician) <pre>None\n</pre> In\u00a0[27]: Copied! <pre># variable defined within the function, is only alive in the function\n'''\ndef get_formatted_name(first_name, last_name)\n'''\n# after that, there will be no value within the varible\nfirst_name\n</pre> # variable defined within the function, is only alive in the function ''' def get_formatted_name(first_name, last_name) ''' # after that, there will be no value within the varible first_name <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[27], line 6\n      2 '''\n      3 def get_formatted_name(first_name, last_name)\n      4 '''\n      5 # after that, there will be no value within the varible\n----&gt; 6 first_name\n\nNameError: name 'first_name' is not defined</pre> In\u00a0[29]: Copied! <pre># even if the default value, all the value is within the function\n#the data destory after you run the function\ndef get_formatted_name(first_name, last_name = 'brown'):\n    \"\"\"Return a full name, neatly formatted.\"\"\"\n    full_name = f\"{first_name} {last_name}\"\n    return full_name.title()\nmusician = get_formatted_name('jimi')\nprint(musician)\nlast_name\n</pre> # even if the default value, all the value is within the function #the data destory after you run the function def get_formatted_name(first_name, last_name = 'brown'):     \"\"\"Return a full name, neatly formatted.\"\"\"     full_name = f\"{first_name} {last_name}\"     return full_name.title() musician = get_formatted_name('jimi') print(musician) last_name <pre>Jimi Brown\n</pre> <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[29], line 8\n      6 musician = get_formatted_name('jimi')\n      7 print(musician)\n----&gt; 8 last_name\n\nNameError: name 'last_name' is not defined</pre> In\u00a0[30]: Copied! <pre>def get_formatted_name(first_name, last_name = 'brown'):\n    \n    a=b\n    full_name = f\"{first_name} {last_name}\"\n    return full_name.title()\n# no error found, even a and b are not defined\n</pre> def get_formatted_name(first_name, last_name = 'brown'):          a=b     full_name = f\"{first_name} {last_name}\"     return full_name.title() # no error found, even a and b are not defined In\u00a0[31]: Copied! <pre>#after called out, error appear\nget_formatted_name('Emily')\n</pre> #after called out, error appear get_formatted_name('Emily') <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[31], line 2\n      1 #after called out, error appear\n----&gt; 2 get_formatted_name('Emily')\n\nCell In[30], line 3, in get_formatted_name(first_name, last_name)\n      1 def get_formatted_name(first_name, last_name = 'brown'):\n----&gt; 3     a=b\n      4     full_name = f\"{first_name} {last_name}\"\n      5     return full_name.title()\n\nNameError: name 'b' is not defined</pre> In\u00a0[32]: Copied! <pre>def get_formatted_name(first_name, last_name, middle_name=''):\n    \"\"\"Return a full name, neatly formatted.\"\"\"\n    if middle_name:\n        full_name = f\"{first_name} {middle_name} {last_name}\"\n    else:\n        full_name = f\"{first_name} {last_name}\"\n    return full_name.title()\n\nmusician = get_formatted_name('jimi', 'hendrix')\nprint(musician)\n\nmusician = get_formatted_name('john', 'hooker', 'lee')\nprint(musician)\n</pre> def get_formatted_name(first_name, last_name, middle_name=''):     \"\"\"Return a full name, neatly formatted.\"\"\"     if middle_name:         full_name = f\"{first_name} {middle_name} {last_name}\"     else:         full_name = f\"{first_name} {last_name}\"     return full_name.title()  musician = get_formatted_name('jimi', 'hendrix') print(musician)  musician = get_formatted_name('john', 'hooker', 'lee') print(musician) <pre>Jimi Hendrix\nJohn Lee Hooker\n</pre> In\u00a0[33]: Copied! <pre>def build_person(first_name, last_name):\n    \"\"\"Return a dictionary of information about a person.\"\"\"\n    person = {'first': first_name, 'last': last_name}\n    return person\n\nmusician = build_person('jimi', 'hendrix')\nprint(musician)\n</pre> def build_person(first_name, last_name):     \"\"\"Return a dictionary of information about a person.\"\"\"     person = {'first': first_name, 'last': last_name}     return person  musician = build_person('jimi', 'hendrix') print(musician) <pre>{'first': 'jimi', 'last': 'hendrix'}\n</pre> In\u00a0[1]: Copied! <pre>def get_formatted_name(first_name, last_name):\n    \"\"\"Return a full name, neatly formatted.\"\"\"\n    full_name = f\"{first_name} {last_name}\"\n    return full_name.title()\n\n# This is an infinite loop!\nwhile True:\n    print(\"\\nPlease tell me your name:\")\n    print(\"(enter 'q' at any time to quit)\")\n\n    f_name = input(\"First name: \")\n    if f_name == 'q':\n        break\n\n    l_name = input(\"Last name: \")\n    if l_name == 'q':\n        break\n\n    formatted_name = get_formatted_name(f_name, l_name)\n    print(f\"\\nHello, {formatted_name}!\")\n</pre> def get_formatted_name(first_name, last_name):     \"\"\"Return a full name, neatly formatted.\"\"\"     full_name = f\"{first_name} {last_name}\"     return full_name.title()  # This is an infinite loop! while True:     print(\"\\nPlease tell me your name:\")     print(\"(enter 'q' at any time to quit)\")      f_name = input(\"First name: \")     if f_name == 'q':         break      l_name = input(\"Last name: \")     if l_name == 'q':         break      formatted_name = get_formatted_name(f_name, l_name)     print(f\"\\nHello, {formatted_name}!\") <pre>\nPlease tell me your name:\n(enter 'q' at any time to quit)\nFirst name: zhanchao\nLast name: yang\n\nHello, Zhanchao Yang!\n\nPlease tell me your name:\n(enter 'q' at any time to quit)\nFirst name: q\n</pre> In\u00a0[2]: Copied! <pre>def greet_users(names):\n    \"\"\"Print a simple greeting to each user in the list.\"\"\"\n    for name in names:\n        msg = f\"Hello, {name.title()}!\"\n        print(msg)\n\nusernames = ['hannah', 'ty', 'margot']\ngreet_users(usernames)\n</pre> def greet_users(names):     \"\"\"Print a simple greeting to each user in the list.\"\"\"     for name in names:         msg = f\"Hello, {name.title()}!\"         print(msg)  usernames = ['hannah', 'ty', 'margot'] greet_users(usernames) <pre>Hello, Hannah!\nHello, Ty!\nHello, Margot!\n</pre> In\u00a0[3]: Copied! <pre>def select_student(names):\n    result = []\n    for name in names:\n        if len(name) &gt;= 6:\n            result.append(name)\n    return result\nstudent= ['eric', 'mathew erin', 'chenhua']\nselect_student(student)\n</pre> def select_student(names):     result = []     for name in names:         if len(name) &gt;= 6:             result.append(name)     return result student= ['eric', 'mathew erin', 'chenhua'] select_student(student) Out[3]: <pre>['mathew erin', 'chenhua']</pre> In\u00a0[4]: Copied! <pre>select_student(['kkkkkk', 'shjidjdijn', 'hgdsiua'])\n</pre> select_student(['kkkkkk', 'shjidjdijn', 'hgdsiua']) Out[4]: <pre>['kkkkkk', 'shjidjdijn', 'hgdsiua']</pre> In\u00a0[5]: Copied! <pre>def build_profile(first, last, **user_info): # '** means a dictionary, that you can put as many argument as you want\n    \"\"\"Build a dictionary containing everything we know about a user.\"\"\"\n    user_info['first_name'] = first\n    user_info['last_name'] = last\n    return user_info #return a dictionary\n\nuser_profile = build_profile('albert', 'einstein',\n                             location='princeton',\n                             field='physics')\nprint(user_profile)\n</pre> def build_profile(first, last, **user_info): # '** means a dictionary, that you can put as many argument as you want     \"\"\"Build a dictionary containing everything we know about a user.\"\"\"     user_info['first_name'] = first     user_info['last_name'] = last     return user_info #return a dictionary  user_profile = build_profile('albert', 'einstein',                              location='princeton',                              field='physics') print(user_profile) <pre>{'location': 'princeton', 'field': 'physics', 'first_name': 'albert', 'last_name': 'einstein'}\n</pre> In\u00a0[6]: Copied! <pre>def build_profile(first, last, **user_info):# more flexibale\n    \"\"\"Build a dictionary containing everything we know about a user.\"\"\"\n    user_info['first_name'] = first\n    user_info['last_name'] = last\n    return user_info\n\nuser_profile = build_profile('albert', 'einstein',\n                             location='princeton',\n                             field='physics',\n                            department='geography',\n                            major= 'gis')\nprint(user_profile)\n</pre> def build_profile(first, last, **user_info):# more flexibale     \"\"\"Build a dictionary containing everything we know about a user.\"\"\"     user_info['first_name'] = first     user_info['last_name'] = last     return user_info  user_profile = build_profile('albert', 'einstein',                              location='princeton',                              field='physics',                             department='geography',                             major= 'gis') print(user_profile) <pre>{'location': 'princeton', 'field': 'physics', 'department': 'geography', 'major': 'gis', 'first_name': 'albert', 'last_name': 'einstein'}\n</pre> In\u00a0[8]: Copied! <pre>def build_profile(first, last, dept ='geography', **kwargs):# more flexibale\n    \"\"\"Build a dictionary containing everything we know about a user.\"\"\"\n    kwargs['first_name'] = first\n    kwargs['last_name'] = last\n    return kwargs\n\nuser_profile = build_profile('albert', 'einstein',\n                             department='geography',\n                             location='princeton',\n                             field='physics',\n                            major= 'gis')\nprint(user_profile)\n</pre> def build_profile(first, last, dept ='geography', **kwargs):# more flexibale     \"\"\"Build a dictionary containing everything we know about a user.\"\"\"     kwargs['first_name'] = first     kwargs['last_name'] = last     return kwargs  user_profile = build_profile('albert', 'einstein',                              department='geography',                              location='princeton',                              field='physics',                             major= 'gis') print(user_profile) <pre>{'department': 'geography', 'location': 'princeton', 'field': 'physics', 'major': 'gis', 'first_name': 'albert', 'last_name': 'einstein'}\n</pre> In\u00a0[9]: Copied! <pre>def build_profile(first, last, dept ='geography', **kwargs):# more flexibale\n    \"\"\"Build a dictionary containing everything we know about a user.\"\"\"\n    print(kwargs)\n    kwargs['first_name'] = first\n    kwargs['last_name'] = last\n    return kwargs\n\nuser_profile = build_profile('albert', 'einstein',\n                             department='geography',\n                             location='princeton',\n                             field='physics',\n                            major= 'gis')\nprint(user_profile)\n</pre> def build_profile(first, last, dept ='geography', **kwargs):# more flexibale     \"\"\"Build a dictionary containing everything we know about a user.\"\"\"     print(kwargs)     kwargs['first_name'] = first     kwargs['last_name'] = last     return kwargs  user_profile = build_profile('albert', 'einstein',                              department='geography',                              location='princeton',                              field='physics',                             major= 'gis') print(user_profile) <pre>{'department': 'geography', 'location': 'princeton', 'field': 'physics', 'major': 'gis'}\n{'department': 'geography', 'location': 'princeton', 'field': 'physics', 'major': 'gis', 'first_name': 'albert', 'last_name': 'einstein'}\n</pre>"},{"location":"python/function/#functions","title":"Functions\u00b6","text":"<p>In this lecture you\u2019ll learn to write functions, which are named blocks of code that are designed to do one specific job. When you want to perform a particular task that you\u2019ve defined in a function, you call the function responsible for it. If you need to perform that task multiple times throughout your program, you don\u2019t need to type all the code for the same task again and again; you just call the function dedicated to handling that task, and the call tells Python to run the code inside the function. You\u2019ll find that using functions makes your programs easier to write, read, test, and fix.</p> <p>In this lecture you\u2019ll also learn ways to pass information to functions. You\u2019ll learn how to write certain functions whose primary job is to display information and other functions designed to process data and return a value or set of values. Finally, you\u2019ll learn to store functions in separate files called modules to help organize your main program files.</p>"},{"location":"python/function/#defining-a-function","title":"DEFINING A FUNCTION \u00b6","text":"<p>Here\u2019s a simple function named greet_user() that prints a greeting:</p> <pre><code>\u278a def greet_user():\n\u278b\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"Display a simple greeting.\"\"\"\n\u278c\u00a0\u00a0\u00a0\u00a0\u00a0print(\"Hello!\")\n\n\u278d greet_user()\n</code></pre> <p>This example shows the simplest structure of a function. The line at \u278a uses the keyword def to inform Python that you\u2019re defining a function. This is the function definition, which tells Python the name of the function and, if applicable, what kind of information the function needs to do its job. The parentheses hold that information. In this case, the name of the function is greet_user(), and it needs no information to do its job, so its parentheses are empty. (Even so, the parentheses are required.) Finally, the definition ends in a colon.</p> <p>Any indented lines that follow def greet_user(): make up the body of the function. The text at \u278b is a comment called a docstring, which describes what the function does. Docstrings are enclosed in triple quotes, which Python looks for when it generates documentation for the functions in your programs.</p> <p>The line print(\"Hello!\") \u278c is the only line of actual code in the body of this function, so greet_user() has just one job: print(\"Hello!\").</p> <p>When you want to use this function, you call it. A function call tells Python to execute the code in the function. To call a function, you write the name of the function, followed by any necessary information in parentheses, as shown at \u278d. Because no information is needed here, calling our function is as simple as entering greet_user(). As expected, it prints Hello!:</p>"},{"location":"python/function/#passing-information-to-a-function","title":"Passing Information to a Function\u00b6","text":"<p>Modified slightly, the function greet_user() can not only tell the user Hello! but also greet them by name. For the function to do this, you enter username in the parentheses of the function\u2019s definition at def greet_user(). By adding username here you allow the function to accept any value of username you specify. The function now expects you to provide a value for username each time you call it. When you call greet_user(), you can pass it a name, such as 'jesse', inside the parentheses:</p>"},{"location":"python/function/#passing-arguments","title":"PASSING ARGUMENTS \u00b6","text":"<p>Because a function definition can have multiple parameters, a function call may need multiple arguments. You can pass arguments to your functions in a number of ways. You can use positional arguments, which need to be in the same order the parameters were written; keyword arguments, where each argument consists of a variable name and a value; and lists and dictionaries of values. Let\u2019s look at each of these in turn.</p>"},{"location":"python/function/#positional-arguments","title":"Positional Arguments\u00b6","text":"<p>When you call a function, Python must match each argument in the function call with a parameter in the function definition. The simplest way to do this is based on the order of the arguments provided. Values matched up this way are called positional arguments.</p> <p>To see how this works, consider a function that displays information about pets. The function tells us what kind of animal each pet is and the pet\u2019s name, as shown here:</p>"},{"location":"python/function/#order-matters-in-positional-arguments","title":"Order Matters in Positional Arguments\u00b6","text":"<p>You can get unexpected results if you mix up the order of the arguments in a function call when using positional arguments:</p>"},{"location":"python/function/#keyword-arguments","title":"Keyword Arguments\u00b6","text":"<p>A keyword argument is a name-value pair that you pass to a function. You directly associate the name and the value within the argument, so when you pass the argument to the function, there\u2019s no confusion (you won\u2019t end up with a harry named Hamster). Keyword arguments free you from having to worry about correctly ordering your arguments in the function call, and they clarify the role of each value in the function call.</p> <p>Let\u2019s rewrite pets.py using keyword arguments to call describe_pet():</p>"},{"location":"python/function/#default-values","title":"Default Values\u00b6","text":"<p>When writing a function, you can define a default value for each parameter. If an argument for a parameter is provided in the function call, Python uses the argument value. If not, it uses the parameter\u2019s default value. So when you define a default value for a parameter, you can exclude the corresponding argument you\u2019d usually write in the function call. Using default values can simplify your function calls and clarify the ways in which your functions are typically used.</p> <p>For example, if you notice that most of the calls to describe_pet() are being used to describe dogs, you can set the default value of animal_type to 'dog'. Now anyone calling describe_pet() for a dog can omit that information:</p>"},{"location":"python/function/#equivalent-function-calls","title":"Equivalent Function Calls\u00b6","text":"<p>Because positional arguments, keyword arguments, and default values can all be used together, often you\u2019ll have several equivalent ways to call a function. Consider the following definition for describe_pet() with one default value provided:</p> <pre><code>def describe_pet(pet_name, animal_type='dog'):\n</code></pre> <p>With this definition, an argument always needs to be provided for pet_name, and this value can be provided using the positional or keyword format. If the animal being described is not a dog, an argument for animal_type must be included in the call, and this argument can also be specified using the positional or keyword format.</p> <p>All of the following calls would work for this function:</p>"},{"location":"python/function/#return-values","title":"RETURN VALUES \u00b6","text":"<p>A function doesn\u2019t always have to display its output directly. Instead, it can process some data and then return a value or set of values. The value the function returns is called a return value. The return statement takes a value from inside a function and sends it back to the line that called the function. Return values allow you to move much of your program\u2019s grunt work into functions, which can simplify the body of your program.</p>"},{"location":"python/function/#returning-a-simple-value","title":"Returning a Simple Value\u00b6","text":"<p>Let\u2019s look at a function that takes a first and last name, and returns a neatly formatted full name:</p>"},{"location":"python/function/#function-error","title":"function error\u00b6","text":"<p>Function may have error. The fact is when you try to define a function. Only the code</p> <pre><code>def human(a,b)\n</code></pre> <p>have been check by python. All the other information haven't be checked, it will only be checked after the function is called out example</p>"},{"location":"python/function/#making-an-argument-optional","title":"Making an Argument Optional\u00b6","text":"<p>Sometimes it makes sense to make an argument optional so that people using the function can choose to provide extra information only if they want to. You can use default values to make an argument optional.</p>"},{"location":"python/function/#returning-a-dictionary","title":"Returning a Dictionary\u00b6","text":"<p>A function can return any kind of value you need it to, including more complicated data structures like lists and dictionaries. For example, the following function takes in parts of a name and returns a dictionary representing a person:</p>"},{"location":"python/function/#using-a-function-with-a-while-loop","title":"Using a Function with a while Loop\u00b6","text":"<p>You can use functions with all the Python structures you\u2019ve learned about so far. For example, let\u2019s use the get_formatted_name() function with a while loop to greet users more formally. Here\u2019s a first attempt at greeting people using their first and last names:</p>"},{"location":"python/function/#passing-a-list","title":"PASSING A LIST \u00b6","text":"<p>You\u2019ll often find it useful to pass a list to a function, whether it\u2019s a list of names, numbers, or more complex objects, such as dictionaries. When you pass a list to a function, the function gets direct access to the contents of the list. Let\u2019s use functions to make working with lists more efficient.</p> <p>Say we have a list of users and want to print a greeting to each. The following example sends a list of names to a function called greet_users(), which greets each person in the list individually:</p>"},{"location":"python/function/#using-arbitrary-keyword-arguments","title":"Using Arbitrary Keyword Arguments\u00b6","text":"<p>Sometimes you\u2019ll want to accept an arbitrary number of arguments, but you won\u2019t know ahead of time what kind of information will be passed to the function. In this case, you can write functions that accept as many key-value pairs as the calling statement provides. One example involves building user profiles: you know you\u2019ll get information about a user, but you\u2019re not sure what kind of information you\u2019ll receive. The function build_profile() in the following example always takes in a first and last name, but it accepts an arbitrary number of keyword arguments as well:</p>"},{"location":"python/function/#finish","title":"Finish\u00b6","text":""},{"location":"python/function/#references","title":"References\u00b6","text":"<ul> <li>Matthes, Eric (2022). Python Crash Course, 3rd Edition: A Hands-On, Project-Based Introduction to Programming. No Starch Press. ISBN: 978-1593279288. (Publisher website)</li> <li>Dr.Qiusheng Wu online lecture</li> </ul>"},{"location":"python/user_input_while_loop/","title":"Looping","text":"In\u00a0[2]: Copied! <pre>message = input(\"Tell me something, and I will repeat it back to you: \")\nprint(message)\n</pre> message = input(\"Tell me something, and I will repeat it back to you: \") print(message) <pre>Tell me something, and I will repeat it back to you: I am a student\nI am a student\n</pre> <p>The input() function takes one argument: the prompt, or instructions, that we want to display to the user so they know what to do. In this example, when Python runs the first line, the user sees the prompt Tell me something, and I will repeat it back to you: . The program waits while the user enters their response and continues after the user presses ENTER. The response is assigned to the variable message, then print(message) displays the input back to the user:</p> In\u00a0[1]: Copied! <pre>name = input(\"Please enter your name: \")\nprint(f\"\\nHello, {name}!\")\n</pre> name = input(\"Please enter your name: \") print(f\"\\nHello, {name}!\") <pre>Please enter your name: Zhanchao Yang\n\nHello, Zhanchao Yang!\n</pre> In\u00a0[3]: Copied! <pre>prompt = \"If you tell us who you are, we can personalize the messages you see.\"\nprompt += \"\\nWhat is your first name? \"\n\nname = input(prompt)\nprint(f\"\\nHello, {name}!\")\n</pre> prompt = \"If you tell us who you are, we can personalize the messages you see.\" prompt += \"\\nWhat is your first name? \"  name = input(prompt) print(f\"\\nHello, {name}!\") <pre>If you tell us who you are, we can personalize the messages you see.\nWhat is your first name? Zhanchao Yang\n\nHello, Zhanchao Yang!\n</pre> <p>This example shows one way to build a multi-line string. The first line assigns the first part of the message to the variable prompt. In the second line, the operator += takes the string that was assigned to prompt and adds the new string onto the end.</p> <p>The prompt now spans two lines, again with space after the question mark for clarity:</p> In\u00a0[4]: Copied! <pre>age = input(\"How old are you? \")\nage = int(age)\nage\n</pre> age = input(\"How old are you? \") age = int(age) age <pre>How old are you? 8\n</pre> Out[4]: <pre>8</pre> In\u00a0[6]: Copied! <pre>height = input(\"How tall are you, in inches? \")\nheight = int(height)\n\nif height &gt;= 48:\n     print(\"\\nYou're tall enough to ride!\")\nelse:\n    print(\"\\nYou'll be able to ride when you're a little older.\")\n</pre> height = input(\"How tall are you, in inches? \") height = int(height)  if height &gt;= 48:      print(\"\\nYou're tall enough to ride!\") else:     print(\"\\nYou'll be able to ride when you're a little older.\") <pre>How tall are you, in inches? 88\n\nYou're tall enough to ride!\n</pre> In\u00a0[8]: Copied! <pre>4%3\n</pre> 4%3 Out[8]: <pre>1</pre> In\u00a0[9]: Copied! <pre>6%3\n</pre> 6%3 Out[9]: <pre>0</pre> In\u00a0[10]: Copied! <pre>number = input(\"Enter a number, and I'll tell you if it's even or odd: \")\nnumber = int(number)\n\nif number % 2 == 0:\n    print(f\"\\nThe number {number} is even.\")\nelse:\n    print(f\"\\nThe number {number} is odd.\")\n</pre> number = input(\"Enter a number, and I'll tell you if it's even or odd: \") number = int(number)  if number % 2 == 0:     print(f\"\\nThe number {number} is even.\") else:     print(f\"\\nThe number {number} is odd.\") <pre>Enter a number, and I'll tell you if it's even or odd: 6\n\nThe number 6 is even.\n</pre> In\u00a0[7]: Copied! <pre>current_number = 1\nwhile current_number &lt;= 5:\n    print(current_number)\n    current_number += 1\n</pre> current_number = 1 while current_number &lt;= 5:     print(current_number)     current_number += 1 <pre>1\n2\n3\n4\n5\n</pre> <p>Please do not design a program that never end. It will make the user shutdown the program, Example:</p> In\u00a0[11]: Copied! <pre># this program will run and never stop unless the user shutdown\n#while current_number &gt;= 1:\n#    print(current_number)\n#    current_number += 1\n</pre> # this program will run and never stop unless the user shutdown #while current_number &gt;= 1: #    print(current_number) #    current_number += 1 In\u00a0[12]: Copied! <pre># method to solve the problem\nwhile current_number &gt;= 1: #best to do condition there\n    print(current_number)\n    current_number += 3\n    if current_number &gt;50:\n        break\n</pre> # method to solve the problem while current_number &gt;= 1: #best to do condition there     print(current_number)     current_number += 3     if current_number &gt;50:         break <pre>6\n9\n12\n15\n18\n21\n24\n27\n30\n33\n36\n39\n42\n45\n48\n</pre> In\u00a0[17]: Copied! <pre>current_number = 1\nwhile current_number &lt;50:\n    print(current_number)\n    current_number += 3\n</pre> current_number = 1 while current_number &lt;50:     print(current_number)     current_number += 3 <pre>1\n4\n7\n10\n13\n16\n19\n22\n25\n28\n31\n34\n37\n40\n43\n46\n49\n</pre> In\u00a0[18]: Copied! <pre>current_number = 1\nwhile current_number &lt;=100:\n    if current_number % 3 ==0:\n        print(\"You win!\")\n    else:\n        print(f\"{current_number}, is not the number we want.\")\n    current_number += 3\n</pre> current_number = 1 while current_number &lt;=100:     if current_number % 3 ==0:         print(\"You win!\")     else:         print(f\"{current_number}, is not the number we want.\")     current_number += 3 <pre>1, is not the number we want.\n4, is not the number we want.\n7, is not the number we want.\n10, is not the number we want.\n13, is not the number we want.\n16, is not the number we want.\n19, is not the number we want.\n22, is not the number we want.\n25, is not the number we want.\n28, is not the number we want.\n31, is not the number we want.\n34, is not the number we want.\n37, is not the number we want.\n40, is not the number we want.\n43, is not the number we want.\n46, is not the number we want.\n49, is not the number we want.\n52, is not the number we want.\n55, is not the number we want.\n58, is not the number we want.\n61, is not the number we want.\n64, is not the number we want.\n67, is not the number we want.\n70, is not the number we want.\n73, is not the number we want.\n76, is not the number we want.\n79, is not the number we want.\n82, is not the number we want.\n85, is not the number we want.\n88, is not the number we want.\n91, is not the number we want.\n94, is not the number we want.\n97, is not the number we want.\n100, is not the number we want.\n</pre> In\u00a0[19]: Copied! <pre>current_number = 1\nwhile current_number &lt;=100:\n    if current_number % 5 ==0:\n        print(\"You win!\")\n    else:\n        print(f\"{current_number}, is not the number we want.\")\n    current_number += 3\n</pre> current_number = 1 while current_number &lt;=100:     if current_number % 5 ==0:         print(\"You win!\")     else:         print(f\"{current_number}, is not the number we want.\")     current_number += 3 <pre>1, is not the number we want.\n4, is not the number we want.\n7, is not the number we want.\nYou win!\n13, is not the number we want.\n16, is not the number we want.\n19, is not the number we want.\n22, is not the number we want.\nYou win!\n28, is not the number we want.\n31, is not the number we want.\n34, is not the number we want.\n37, is not the number we want.\nYou win!\n43, is not the number we want.\n46, is not the number we want.\n49, is not the number we want.\n52, is not the number we want.\nYou win!\n58, is not the number we want.\n61, is not the number we want.\n64, is not the number we want.\n67, is not the number we want.\nYou win!\n73, is not the number we want.\n76, is not the number we want.\n79, is not the number we want.\n82, is not the number we want.\nYou win!\n88, is not the number we want.\n91, is not the number we want.\n94, is not the number we want.\n97, is not the number we want.\nYou win!\n</pre> In\u00a0[20]: Copied! <pre>x = 1\nwhile x &lt;= 5:\n    print(x)\n    x += 1\n</pre> x = 1 while x &lt;= 5:     print(x)     x += 1 <pre>1\n2\n3\n4\n5\n</pre> In\u00a0[21]: Copied! <pre># # This loop runs forever!\n# x = 1\n# while x &lt;= 5:\n#     print(x)\n</pre> # # This loop runs forever! # x = 1 # while x &lt;= 5: #     print(x) In\u00a0[22]: Copied! <pre>while True:\n    number = input(\"Enter a number, and I'll tell you if it's even or odd: \")\n    if number == 'quit':\n        break\n       \n    number = int(number)\n\n    if number % 2 == 0:\n        print(f\"\\nThe number {number} is even.\")\n    else:\n        print(f\"\\nThe number {number} is odd.\")\n</pre> while True:     number = input(\"Enter a number, and I'll tell you if it's even or odd: \")     if number == 'quit':         break             number = int(number)      if number % 2 == 0:         print(f\"\\nThe number {number} is even.\")     else:         print(f\"\\nThe number {number} is odd.\") <pre>Enter a number, and I'll tell you if it's even or odd: 2\n\nThe number 2 is even.\nEnter a number, and I'll tell you if it's even or odd: 3\n\nThe number 3 is odd.\nEnter a number, and I'll tell you if it's even or odd: 3\n\nThe number 3 is odd.\nEnter a number, and I'll tell you if it's even or odd: 0\n\nThe number 0 is even.\nEnter a number, and I'll tell you if it's even or odd: quit\n</pre> In\u00a0[23]: Copied! <pre>while True:\n    number = input(\"Enter a number, and I'll tell you if it's even or odd: \")\n    if number == 'quit':\n        break\n    try:   \n        number = int(number)\n    except:\n        print('Please enter a number.')\n        continue\n\n    if number % 2 == 0:\n        print(f\"\\nThe number {number} is even.\")\n    else:\n        print(f\"\\nThe number {number} is odd.\")\n</pre> while True:     number = input(\"Enter a number, and I'll tell you if it's even or odd: \")     if number == 'quit':         break     try:            number = int(number)     except:         print('Please enter a number.')         continue      if number % 2 == 0:         print(f\"\\nThe number {number} is even.\")     else:         print(f\"\\nThe number {number} is odd.\") <pre>Enter a number, and I'll tell you if it's even or odd: kkk\nPlease enter a number.\nEnter a number, and I'll tell you if it's even or odd: jjj\nPlease enter a number.\nEnter a number, and I'll tell you if it's even or odd: 8\n\nThe number 8 is even.\nEnter a number, and I'll tell you if it's even or odd: quit\n</pre>"},{"location":"python/user_input_while_loop/#looping","title":"Looping\u00b6","text":"<p>Most programs are written to solve an end user\u2019s problem. To do so, you usually need to get some information from the user. For a simple example, let\u2019s say someone wants to find out whether they\u2019re old enough to vote. If you write a program to answer this question, you need to know the user\u2019s age before you can provide an answer. The program will need to ask the user to enter, or input, their age; once the program has this input, it can compare it to the voting age to determine if the user is old enough and then report the result.</p> <p>In this chapter you\u2019ll learn how to accept user input so your program can then work with it. When your program needs a name, you\u2019ll be able to prompt the user for a name. When your program needs a list of names, you\u2019ll be able to prompt the user for a series of names. To do this, you\u2019ll use the input() function.</p> <p>You\u2019ll also learn how to keep programs running as long as users want them to, so they can enter as much information as they need to; then, your program can work with that information. You\u2019ll use Python\u2019s while loop to keep programs running as long as certain conditions remain true.</p> <p>With the ability to work with user input and the ability to control how long your programs run, you\u2019ll be able to write fully interactive programs.</p>"},{"location":"python/user_input_while_loop/#how-the-input-function-works","title":"HOW THE INPUT() FUNCTION WORKS\u00b6","text":"<p>The input() function pauses your program and waits for the user to enter some text. Once Python receives the user\u2019s input, it assigns that input to a variable to make it convenient for you to work with.</p> <p>For example, the following program asks the user to enter some text, then displays that message back to the user:</p>"},{"location":"python/user_input_while_loop/#writing-clear-prompts","title":"Writing Clear Prompts\u00b6","text":"<p>Each time you use the input() function, you should include a clear, easy-to-follow prompt that tells the user exactly what kind of information you\u2019re looking for. Any statement that tells the user what to enter should work. For example:</p>"},{"location":"python/user_input_while_loop/#using-int-to-accept-numerical-input","title":"Using int() to Accept Numerical Input\u00b6","text":"<p>When you use the input() function, Python interprets everything the user enters as a string. Consider the following interpreter session, which asks for the user\u2019s age:</p>"},{"location":"python/user_input_while_loop/#the-modulo-operator","title":"The Modulo Operator\u00b6","text":"<p>A useful tool for working with numerical information is the modulo operator (%), which divides one number by another number and returns the remainder:</p>"},{"location":"python/user_input_while_loop/#introducing-while-loops","title":"INTRODUCING WHILE LOOPS\u00b6","text":"<p>The for loop takes a collection of items and executes a block of code once for each item in the collection. In contrast, the while loop runs as long as, or while, a certain condition is true.</p>"},{"location":"python/user_input_while_loop/#the-while-loop-in-action","title":"The while Loop in Action\u00b6","text":"<p>You can use a while loop to count up through a series of numbers. For example, the following while loop counts from 1 to 5:</p>"},{"location":"python/user_input_while_loop/#using-continue-in-a-loop","title":"Using continue in a Loop\u00b6","text":"<p>Rather than breaking out of a loop entirely without executing the rest of its code, you can use the continue statement to return to the beginning of the loop based on the result of a conditional test. For example, consider a loop that counts from 1 to 10 but prints only the odd numbers in that range:</p>"},{"location":"python/user_input_while_loop/#avoiding-infinite-loops","title":"Avoiding Infinite Loops\u00b6","text":"<p>Every while loop needs a way to stop running so it won\u2019t continue to run forever. For example, this counting loop should count from 1 to 5:</p>"},{"location":"python/user_input_while_loop/#letting-the-user-choose-when-to-quit","title":"Letting the User Choose When to Quit\u00b6","text":"<p>We can make the parrot.py program run as long as the user wants by putting most of the program inside a while loop. We\u2019ll define a quit value and then keep the program running as long as the user has not entered the quit value:</p>"},{"location":"python/user_input_while_loop/#finish","title":"Finish\u00b6","text":""},{"location":"python/user_input_while_loop/#references","title":"References\u00b6","text":"<ul> <li>Matthes, Eric (2022). Python Crash Course, 3rd Edition: A Hands-On, Project-Based Introduction to Programming. No Starch Press. ISBN: 978-1593279288. (Publisher website)</li> <li>Dr.Qiusheng Wu online lecture</li> </ul>"},{"location":"python/working_with_list/","title":"Working with Lists","text":"In\u00a0[3]: Copied! <pre>magicians = ['Alice', 'david', 'caroline']\nfor a in magicians:\n    print(a.title())\n</pre> magicians = ['Alice', 'david', 'caroline'] for a in magicians:     print(a.title()) <pre>Alice\nDavid\nCaroline\n</pre> <p>When you\u2019re using loops for the first time, keep in mind that the set of steps is repeated once for each item in the list, no matter how many items are in the list. If you have a million items in your list, Python repeats these steps a million times\u2014and usually very quickly. Also keep in mind when writing your own for loops that you can choose any name you want for the temporary variable that will be associated with each value in the list. However, it\u2019s helpful to choose a meaningful name that represents a single item from the list.</p> <p>These naming conventions can help you follow the action being done on each item within a for loop. Using singular and plural names can help you identify whether a section of code is working with a single element from the list or the entire list.</p> In\u00a0[4]: Copied! <pre>for magician in magicians:\n    print(f\"{magician.title()}, that was a great trick!\")\n</pre> for magician in magicians:     print(f\"{magician.title()}, that was a great trick!\")      <pre>Alice, that was a great trick!\nDavid, that was a great trick!\nCaroline, that was a great trick!\n</pre> In\u00a0[5]: Copied! <pre>for magician in magicians:\n    print(f\"{magician.title()}, that was a great trick!\")\n    print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")\n</pre> for magician in magicians:     print(f\"{magician.title()}, that was a great trick!\")     print(f\"I can't wait to see your next trick, {magician.title()}.\\n\") <pre>Alice, that was a great trick!\nI can't wait to see your next trick, Alice.\n\nDavid, that was a great trick!\nI can't wait to see your next trick, David.\n\nCaroline, that was a great trick!\nI can't wait to see your next trick, Caroline.\n\n</pre> In\u00a0[6]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(f\"{magician.title()}, that was a great trick!\")\n    print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")\n    \nprint(\"Thank you, everyone. That was a great magic show!\")\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians:     print(f\"{magician.title()}, that was a great trick!\")     print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")      print(\"Thank you, everyone. That was a great magic show!\") <pre>Alice, that was a great trick!\nI can't wait to see your next trick, Alice.\n\nDavid, that was a great trick!\nI can't wait to see your next trick, David.\n\nCarolina, that was a great trick!\nI can't wait to see your next trick, Carolina.\n\nThank you, everyone. That was a great magic show!\n</pre> In\u00a0[8]: Copied! <pre>magician #in memories, variable last time they were assigned\n</pre> magician #in memories, variable last time they were assigned Out[8]: <pre>'carolina'</pre> In\u00a0[9]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\nprint(magician)\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians: print(magician) <pre>\n  Cell In[9], line 3\n    print(magician)\n    ^\nIndentationError: expected an indented block\n</pre> In\u00a0[15]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    pass\nprint(magician)\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians:     pass print(magician) <pre>carolina\n</pre> In\u00a0[12]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(f\"{magician.title()}, that was a great trick!\")\n    print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")\n    if magician =='carolina':\n        print(\"I can't wait to see your next trick, Corlina.\\n\") \nprint(\"Thank you, everyone. That was a great magic show!\")\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians:     print(f\"{magician.title()}, that was a great trick!\")     print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")     if magician =='carolina':         print(\"I can't wait to see your next trick, Corlina.\\n\")  print(\"Thank you, everyone. That was a great magic show!\") <pre>Alice, that was a great trick!\nI can't wait to see your next trick, Alice.\n\nDavid, that was a great trick!\nI can't wait to see your next trick, David.\n\nCarolina, that was a great trick!\nI can't wait to see your next trick, Carolina.\n\nI can't wait to see your next trick, Corlina.\n\nThank you, everyone. That was a great magic show!\n</pre> In\u00a0[13]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(f\"{magician.title()}, that was a great trick!\")\n    print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")\n    if magician !='carolina':\n        print(\"I can't wait to see your next trick, Corlina.\\n\") \nprint(\"Thank you, everyone. That was a great magic show!\")\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians:     print(f\"{magician.title()}, that was a great trick!\")     print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")     if magician !='carolina':         print(\"I can't wait to see your next trick, Corlina.\\n\")  print(\"Thank you, everyone. That was a great magic show!\") <pre>Alice, that was a great trick!\nI can't wait to see your next trick, Alice.\n\nI can't wait to see your next trick, Corlina.\n\nDavid, that was a great trick!\nI can't wait to see your next trick, David.\n\nI can't wait to see your next trick, Corlina.\n\nCarolina, that was a great trick!\nI can't wait to see your next trick, Carolina.\n\nThank you, everyone. That was a great magic show!\n</pre> In\u00a0[10]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(f\"{magician.title()}, that was a great trick!\")\nprint(f\"I can't wait to see your next trick, {magician.title()}.\\n\")# not indent\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians:     print(f\"{magician.title()}, that was a great trick!\") print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")# not indent <pre>Alice, that was a great trick!\nDavid, that was a great trick!\nCarolina, that was a great trick!\nI can't wait to see your next trick, Carolina.\n\n</pre> In\u00a0[11]: Copied! <pre>message = \"Hello Python world!\"\n    print(message)\n</pre>  message = \"Hello Python world!\"     print(message) <pre>\n  Cell In[11], line 2\n    print(message)\n    ^\nIndentationError: unexpected indent\n</pre> In\u00a0[14]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n    print(f\"{magician.title()}, that was a great trick!\")\n    print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")\n\n    print(\"Thank you everyone, that was a great magic show!\")\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians:     print(f\"{magician.title()}, that was a great trick!\")     print(f\"I can't wait to see your next trick, {magician.title()}.\\n\")      print(\"Thank you everyone, that was a great magic show!\") <pre>Alice, that was a great trick!\nI can't wait to see your next trick, Alice.\n\nThank you everyone, that was a great magic show!\nDavid, that was a great trick!\nI can't wait to see your next trick, David.\n\nThank you everyone, that was a great magic show!\nCarolina, that was a great trick!\nI can't wait to see your next trick, Carolina.\n\nThank you everyone, that was a great magic show!\n</pre> <p>How to print element index and content together?</p> In\u00a0[16]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor index, magician in enumerate(magicians):\n    print(f\"{index}: {magician}\")\n</pre> magicians = ['alice', 'david', 'carolina'] for index, magician in enumerate(magicians):     print(f\"{index}: {magician}\") <pre>0: alice\n1: david\n2: carolina\n</pre> In\u00a0[17]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians\n    print(magician)\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians     print(magician) <pre>\n  Cell In[17], line 2\n    for magician in magicians\n                             ^\nSyntaxError: invalid syntax\n</pre> In\u00a0[18]: Copied! <pre>range(1,5)\n</pre> range(1,5) Out[18]: <pre>range(1, 5)</pre> In\u00a0[19]: Copied! <pre>for value in range(1, 5):# only 1 to 4\n    print(value)\n</pre> for value in range(1, 5):# only 1 to 4     print(value) <pre>1\n2\n3\n4\n</pre> In\u00a0[23]: Copied! <pre>for value in range(1, 6):\n    print(value)\n</pre> for value in range(1, 6):     print(value) <pre>1\n2\n3\n4\n5\n</pre> In\u00a0[22]: Copied! <pre>list(range(1,5))\n</pre> list(range(1,5)) Out[22]: <pre>[1, 2, 3, 4]</pre> In\u00a0[24]: Copied! <pre>numbers = list(range(1, 6))\nprint(numbers)\n</pre> numbers = list(range(1, 6)) print(numbers) <pre>[1, 2, 3, 4, 5]\n</pre> <p>We can also use the range() function to tell Python to skip numbers in a given range. If you pass a third argument to range(), Python uses that value as a step size when generating numbers. For example, here\u2019s how to list the even numbers between 1 and 10:</p> In\u00a0[25]: Copied! <pre>even_numbers = list(range(2, 11, 2))\nprint(even_numbers)\n</pre> even_numbers = list(range(2, 11, 2)) print(even_numbers) <pre>[2, 4, 6, 8, 10]\n</pre> In\u00a0[27]: Copied! <pre>even_numbers = list(range(2, 101, 2))#second number is stop carteria)\nprint(even_numbers)\n</pre> even_numbers = list(range(2, 101, 2))#second number is stop carteria) print(even_numbers) <pre>[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n</pre> In\u00a0[28]: Copied! <pre>odd_numbers = list(range(1, 100, 2))\nprint(odd_numbers)\n</pre> odd_numbers = list(range(1, 100, 2)) print(odd_numbers) <pre>[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n</pre> In\u00a0[30]: Copied! <pre>even_numbers = list(range(0, 100, 2))\nprint(even_numbers)\n</pre> even_numbers = list(range(0, 100, 2)) print(even_numbers) <pre>[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\n</pre> <p>You can create almost any set of numbers you want to using the range() function. For example, consider how you might make a list of the first 10 square numbers (that is, the square of each integer from 1 through 10). In Python, two asterisks (**) represent exponents. Here\u2019s how you might put the first 10 square numbers into a list:</p> In\u00a0[26]: Copied! <pre>squares = []\nfor value in range(1, 11):\n    square = value ** 2\n    squares.append(square)\nprint(squares)\n</pre> squares = [] for value in range(1, 11):     square = value ** 2     squares.append(square) print(squares) <pre>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</pre> In\u00a0[31]: Copied! <pre>squares = []\nfor value in range(1,11):\n    squares.append(value**2)\nprint(squares)\n</pre> squares = [] for value in range(1,11):     squares.append(value**2) print(squares) <pre>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</pre> In\u00a0[33]: Copied! <pre>digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nprint(min(digits))\nprint(max(digits))\nprint(sum(digits))\n</pre> digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] print(min(digits)) print(max(digits)) print(sum(digits)) <pre>0\n9\n45\n</pre> In\u00a0[36]: Copied! <pre>sum(digits)/len(digits)\n</pre> sum(digits)/len(digits) Out[36]: <pre>4.5</pre> In\u00a0[37]: Copied! <pre>squares = [value**2 for value in range(1, 11)]\nprint(squares)\n</pre> squares = [value**2 for value in range(1, 11)] print(squares) <pre>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</pre> <p>To use this syntax, begin with a descriptive name for the list, such as squares. Next, open a set of square brackets and define the expression for the values you want to store in the new list. In this example the expression is value ** 2, which raises the value to the second power. Then, write a for loop to generate the numbers you want to feed into the expression, and close the square brackets. The for loop in this example is for value in range(1, 11), which feeds the values 1 through 10 into the expression value ** 2. Notice that no colon is used at the end of the for statement.</p> In\u00a0[3]: Copied! <pre>people = ['Eric', 'deng', 'chen', 'tompkins', 'Alice']\nprint(people[0:3])\n</pre> people = ['Eric', 'deng', 'chen', 'tompkins', 'Alice'] print(people[0:3]) <pre>['Eric', 'deng', 'chen']\n</pre> In\u00a0[4]: Copied! <pre>print(people[1:4])\n</pre> print(people[1:4]) <pre>['deng', 'chen', 'tompkins']\n</pre> In\u00a0[5]: Copied! <pre>print(people[:4]) # no word, meaning beginning from 0\n</pre> print(people[:4]) # no word, meaning beginning from 0 <pre>['Eric', 'deng', 'chen', 'tompkins']\n</pre> In\u00a0[6]: Copied! <pre>print(people[2:]) # no end, means all the way to the end\n</pre> print(people[2:]) # no end, means all the way to the end <pre>['chen', 'tompkins', 'Alice']\n</pre> In\u00a0[7]: Copied! <pre>print(people[:]) # all the list, copy the list\n</pre> print(people[:]) # all the list, copy the list <pre>['Eric', 'deng', 'chen', 'tompkins', 'Alice']\n</pre> <p>This syntax allows you to output all of the elements from any point in your list to the end regardless of the length of the list. Recall that a negative index returns an element a certain distance from the end of a list; therefore, you can output any slice from the end of a list. For example, if we want to output the last three players on the roster, we can use the slice players[-3:]:</p> In\u00a0[8]: Copied! <pre>print(people[-3:]) # negative still means count from the end\n</pre> print(people[-3:]) # negative still means count from the end <pre>['chen', 'tompkins', 'Alice']\n</pre> In\u00a0[9]: Copied! <pre>print(people[:-1])\n</pre> print(people[:-1]) <pre>['Eric', 'deng', 'chen', 'tompkins']\n</pre> <p>should be integer, can be positive or negative</p> In\u00a0[10]: Copied! <pre>print(\"Here are the first three players on my team:\")\nfor player in people[:3]:\n    print(player.title())\n</pre> print(\"Here are the first three players on my team:\") for player in people[:3]:     print(player.title()) <pre>Here are the first three players on my team:\nEric\nDeng\nChen\n</pre> In\u00a0[11]: Copied! <pre>my_foods = ['pizza', 'falafel', 'carrot cake']\nfriend_foods = my_foods[:]\nprint(\"My favorite foods are:\")\nprint(my_foods)\nprint(\"\\nMy friend's favorite foods are:\")\nprint(friend_foods)\n</pre> my_foods = ['pizza', 'falafel', 'carrot cake'] friend_foods = my_foods[:] print(\"My favorite foods are:\") print(my_foods) print(\"\\nMy friend's favorite foods are:\") print(friend_foods) <pre>My favorite foods are:\n['pizza', 'falafel', 'carrot cake']\n\nMy friend's favorite foods are:\n['pizza', 'falafel', 'carrot cake']\n</pre> <p>To prove that we actually have two separate lists, we\u2019ll add a new food to each list and show that each list keeps track of the appropriate person\u2019s favorite foods:</p> In\u00a0[15]: Copied! <pre>my_foods = ['pizza', 'falafel', 'carrot cake']\nfriend_foods = my_foods[:]\nmy_foods.append('apple')\nfriend_foods.append('pear')\nprint('My facorite food are:')\nfor food in my_foods:\n    print(food.title())\nprint(\"\\nMy friend's favorite food are:\")\nfor item in friend_foods:\n    print(item.title())\n</pre> my_foods = ['pizza', 'falafel', 'carrot cake'] friend_foods = my_foods[:] my_foods.append('apple') friend_foods.append('pear') print('My facorite food are:') for food in my_foods:     print(food.title()) print(\"\\nMy friend's favorite food are:\") for item in friend_foods:     print(item.title())  <pre>My facorite food are:\nPizza\nFalafel\nCarrot Cake\nApple\n\nMy friend's favorite food are:\nPizza\nFalafel\nCarrot Cake\nPear\n</pre> In\u00a0[16]: Copied! <pre>my_foods = ['pizza', 'falafel', 'carrot cake']\n# This doesn't work:\nfriend_foods = my_foods\nmy_foods.append('cannoli')\nfriend_foods.append('ice cream')\nprint(\"My favorite foods are:\")\nprint(my_foods)\nprint(\"\\nMy friend's favorite foods are:\")\nprint(friend_foods)\n# compare this one with the previous one.\n</pre> my_foods = ['pizza', 'falafel', 'carrot cake'] # This doesn't work: friend_foods = my_foods my_foods.append('cannoli') friend_foods.append('ice cream') print(\"My favorite foods are:\") print(my_foods) print(\"\\nMy friend's favorite foods are:\") print(friend_foods) # compare this one with the previous one. <pre>My favorite foods are:\n['pizza', 'falafel', 'carrot cake', 'cannoli', 'ice cream']\n\nMy friend's favorite foods are:\n['pizza', 'falafel', 'carrot cake', 'cannoli', 'ice cream']\n</pre> In\u00a0[34]: Copied! <pre>lists = ['mary', 'Eric', 'Yang']\nlists\n</pre> lists = ['mary', 'Eric', 'Yang'] lists Out[34]: <pre>['mary', 'Eric', 'Yang']</pre> In\u00a0[35]: Copied! <pre>lists[0]= 'Jassica'\nlists\n</pre> lists[0]= 'Jassica' lists Out[35]: <pre>['Jassica', 'Eric', 'Yang']</pre> In\u00a0[20]: Copied! <pre>tuples = ('mary', 'Eric', 'Yang')\ntuples\n</pre> tuples = ('mary', 'Eric', 'Yang') tuples Out[20]: <pre>('mary', 'Eric', 'Yang')</pre> In\u00a0[21]: Copied! <pre>tuples[0] = 'jessica' #'tuple' object does not support item assignment\ntuples\n</pre> tuples[0] = 'jessica' #'tuple' object does not support item assignment tuples <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[21], line 1\n----&gt; 1 tuple[0] = 'jessica'\n      2 tuple\n\nTypeError: 'tuple' object does not support item assignment</pre> In\u00a0[22]: Copied! <pre>tuples[0] #indexing\n</pre> tuples[0] #indexing Out[22]: <pre>'mary'</pre> <p>everything you can do in list, can be done in tuple, unless you cannot change the item within the tuple easily</p> In\u00a0[27]: Copied! <pre>tuples[:2]\n</pre> tuples[:2] Out[27]: <pre>('mary', 'Eric')</pre> <p>Tuples are technically defined by the presence of a comma; the parentheses make them look neater and more readable. If you want to define a tuple with one element, you need to include a trailing comma:</p> In\u00a0[29]: Copied! <pre>my_t = (3,)\nmy_t\n</pre> my_t = (3,) my_t Out[29]: <pre>(3,)</pre> In\u00a0[30]: Copied! <pre>for item in tuple:\n    print(item.title())\n</pre> for item in tuple:     print(item.title()) <pre>Mary\nEric\nYang\n</pre> In\u00a0[31]: Copied! <pre>dimensions = (200, 50)\nprint(\"Original dimensions:\")\nfor dimension in dimensions:\n    print(dimension)\n\n# way to change the tuple value: redefine the tuple\ndimensions = (400, 100)\nprint(\"\\nModified dimensions:\")\nfor dimension in dimensions:\n    print(dimension)\n</pre> dimensions = (200, 50) print(\"Original dimensions:\") for dimension in dimensions:     print(dimension)  # way to change the tuple value: redefine the tuple dimensions = (400, 100) print(\"\\nModified dimensions:\") for dimension in dimensions:     print(dimension) <pre>Original dimensions:\n200\n50\n\nModified dimensions:\n400\n100\n</pre>"},{"location":"python/working_with_list/#working-with-lists","title":"Working with Lists\u00b6","text":"<p>In this lecture you\u2019ll learn how to loop through an entire list using just a few lines of code regardless of how long the list is. Looping allows you to take the same action, or set of actions, with every item in a list. As a result, you\u2019ll be able to work efficiently with lists of any length, including those with thousands or even millions of items.</p>"},{"location":"python/working_with_list/#looping-through-an-entire-list","title":"Looping Through an Entire List\u00b6","text":"<p>You\u2019ll often want to run through all entries in a list, performing the same task with each item. For example, in a game you might want to move every element on the screen by the same amount, or in a list of numbers you might want to perform the same statistical operation on every element. Or perhaps you\u2019ll want to display each headline from a list of articles on a website. When you want to do the same action with every item in a list, you can use Python\u2019s for loop. Let\u2019s say we have a list of magicians\u2019 names, and we want to print out each name in the list. We could do this by retrieving each name from the list individually, but this approach could cause several problems. For one, it would be repetitive to do this with a long list of names. Also, we\u2019d have to change our code each time the list\u2019s length changed. A for loop avoids both of these issues by letting Python manage these issues internally. Let\u2019s use a for loop to print out each name in a list of magicians:</p>"},{"location":"python/working_with_list/#doing-more-work-within-a-for-loop","title":"Doing More Work Within a for Loop\u00b6","text":"<p>You can do just about anything with each item in a for loop. Let\u2019s build on the previous example by printing a message to each magician, telling them that they performed a great trick:</p>"},{"location":"python/working_with_list/#doing-something-after-a-for-loop","title":"Doing Something After a for Loop\u00b6","text":"<p>What happens once a for loop has finished executing? Usually, you\u2019ll want to summarize a block of output or move on to other work that your program must accomplish. Any lines of code after the for loop that are not indented are executed once without repetition. Let\u2019s write a thank you to the group of magicians as a whole, thanking them for putting on an excellent show. To display this group message after all of the individual messages have been printed, we place the thank you message after the for loop without indentation:</p>"},{"location":"python/working_with_list/#avoiding-indentation-errors","title":"Avoiding Indentation Errors\u00b6","text":"<p>Python uses indentation to determine how a line, or group of lines, is related to the rest of the program. In the previous examples, the lines that printed messages to individual magicians were part of the for loop because they were indented. Python\u2019s use of indentation makes code very easy to read. Basically, it uses whitespace to force you to write neatly formatted code with a clear visual structure. In longer Python programs, you\u2019ll notice blocks of code indented at a few different levels. These indentation levels help you gain a general sense of the overall program\u2019s organization.</p> <p>As you begin to write code that relies on proper indentation, you\u2019ll need to watch for a few common indentation errors. For example, people sometimes indent lines of code that don\u2019t need to be indented or forget to indent lines that need to be indented. Seeing examples of these errors now will help you avoid them in the future and correct them when they do appear in your own programs.</p> <p>Let\u2019s examine some of the more common indentation errors.</p>"},{"location":"python/working_with_list/#forgetting-to-indent","title":"Forgetting to Indent\u00b6","text":"<p>Always indent the line after the for statement in a loop. If you forget, Python will remind you:</p>"},{"location":"python/working_with_list/#forgetting-to-indent-additional-lines","title":"Forgetting to Indent Additional Lines\u00b6","text":"<p>Sometimes your loop will run without any errors but won\u2019t produce the expected result. This can happen when you\u2019re trying to do several tasks in a loop and you forget to indent some of its lines. For example, this is what happens when we forget to indent the second line in the loop that tells each magician we\u2019re looking forward to their next trick:</p>"},{"location":"python/working_with_list/#indenting-unnecessarily","title":"Indenting Unnecessarily\u00b6","text":"<p>If you accidentally indent a line that doesn\u2019t need to be indented, Python informs you about the unexpected indent:</p>"},{"location":"python/working_with_list/#indenting-unnecessarily","title":"Indenting Unnecessarily\u00b6","text":"<p>After the Loop If you accidentally indent code that should run after a loop has finished, that code will be repeated once for each item in the list. Sometimes this prompts Python to report an error, but often this will result in a logical error. For example, let\u2019s see what happens when we accidentally indent the line that thanked the magicians as a group for putting on a good show:</p>"},{"location":"python/working_with_list/#forgetting-the-colon","title":"Forgetting the Colon\u00b6","text":"<p>The colon at the end of a for statement tells Python to interpret the next line as the start of a loop.</p>"},{"location":"python/working_with_list/#making-numerical-lists","title":"Making Numerical Lists\u00b6","text":"<p>Many reasons exist to store a set of numbers. For example, you\u2019ll need to keep track of the positions of each character in a game, and you might want to keep track of a player\u2019s high scores as well. In data visualizations, you\u2019ll almost always work with sets of numbers, such as temperatures, distances, population sizes, or latitude and longitude values, among other types of numerical sets.</p> <p>Lists are ideal for storing sets of numbers, and Python provides a variety of tools to help you work efficiently with lists of numbers. Once you understand how to use these tools effectively, your code will work well even when your lists contain millions of items.</p>"},{"location":"python/working_with_list/#using-the-range-function","title":"Using the range() Function\u00b6","text":"<p>Python\u2019s range() function makes it easy to generate a series of numbers. For example, you can use the range() function to print a series of numbers like this:</p>"},{"location":"python/working_with_list/#using-range-to-make-a-list-of-numbers","title":"Using range() to Make a List of Numbers\u00b6","text":"<p>If you want to make a list of numbers, you can convert the results of range() directly into a list using the list() function. When you wrap list() around a call to the range() function, the output will be a list of numbers. In the example in the previous section, we simply printed out a series of numbers. We can use list() to convert that same set of numbers into a list:</p>"},{"location":"python/working_with_list/#simple-statistics-with-a-list-of-numbers","title":"Simple Statistics with a List of Numbers\u00b6","text":"<p>A few Python functions are helpful when working with lists of numbers. For example, you can easily find the minimum, maximum, and sum of a list of numbers:</p>"},{"location":"python/working_with_list/#list-comprehensions","title":"List Comprehensions\u00b6","text":"<p>The approach described earlier for generating the list squares consisted of using three or four lines of code. A list comprehension allows you to generate this same list in just one line of code. A list comprehension combines the for loop and the creation of new elements into one line, and automatically appends each new element. List comprehensions are not always presented to beginners, but I have included them here because you\u2019ll most likely see them as soon as you start looking at other people\u2019s code.</p> <p>The following example builds the same list of square numbers you saw earlier but uses a list comprehension:</p>"},{"location":"python/working_with_list/#working-with-part-of-a-list","title":"Working with Part of a List\u00b6","text":"<p>In Lecture 3 you learned how to access single elements in a list, and in this chapter you\u2019ve been learning how to work through all the elements in a list. You can also work with a specific group of items in a list, which Python calls a slice.</p>"},{"location":"python/working_with_list/#slicing-a-list","title":"Slicing a List\u00b6","text":"<p>To make a slice, you specify the index of the first and last elements you want to work with. As with the range() function, Python stops one item before the second index you specify. To output the first three elements in a list, you would request indices 0 through 3, which would return elements 0, 1, and 2. The following example involves a list of players on a team:</p>"},{"location":"python/working_with_list/#looping-through-a-slice","title":"Looping Through a Slice\u00b6","text":"<p>You can use a slice in a for loop if you want to loop through a subset of the elements in a list. In the next example we loop through the first three players and print their names as part of a simple roster:</p>"},{"location":"python/working_with_list/#copying-a-list","title":"Copying a List\u00b6","text":"<p>Often, you\u2019ll want to start with an existing list and make an entirely new list based on the first one. Let\u2019s explore how copying a list works and examine one situation in which copying a list is useful.</p> <p>To copy a list, you can make a slice that includes the entire original list by omitting the first index and the second index ([:]). This tells Python to make a slice that starts at the first item and ends with the last item, producing a copy of the entire list.</p> <p>For example, imagine we have a list of our favorite foods and want to make a separate list of foods that a friend likes. This friend likes everything in our list so far, so we can create their list by copying ours:</p>"},{"location":"python/working_with_list/#tuples","title":"Tuples\u00b6","text":"<p>Lists work well for storing collections of items that can change throughout the life of a program. The ability to modify lists is particularly important when you\u2019re working with a list of users on a website or a list of characters in a game. However, sometimes you\u2019ll want to create a list of items that cannot change. Tuples allow you to do just that. Python refers to values that cannot change as immutable, and an immutable list is called a tuple.</p>"},{"location":"python/working_with_list/#defining-a-tuple","title":"Defining a Tuple\u00b6","text":"<p>A tuple looks just like a list except you use parentheses instead of square brackets. Once you define a tuple, you can access individual elements by using each item\u2019s index, just as you would for a list. For example, if we have a rectangle that should always be a certain size, we can ensure that its size doesn\u2019t change by putting the dimensions into a tuple:</p>"},{"location":"python/working_with_list/#different-between-list-and-tuple","title":"Different between list and tuple\u00b6","text":"<ul> <li>list uses [], tuple uses ()</li> <li>list is mutable, which means you can change the values</li> <li>tuple, users can not change the original content easily</li> </ul>"},{"location":"python/working_with_list/#looping-through-all-values-in-a-tuple","title":"Looping Through All Values in a Tuple\u00b6","text":"<p>You can loop over all the values in a tuple using a for loop, just as you did with a list:</p>"},{"location":"python/working_with_list/#writing-over-a-tuple","title":"Writing over a Tuple\u00b6","text":"<p>Although you can\u2019t modify a tuple, you can assign a new value to a variable that represents a tuple. So if we wanted to change our dimensions, we could redefine the entire tuple:</p>"},{"location":"python/working_with_list/#finish","title":"Finish\u00b6","text":""},{"location":"python/working_with_list/#references","title":"References\u00b6","text":"<ul> <li>Matthes, Eric (2022). Python Crash Course, 3rd Edition: A Hands-On, Project-Based Introduction to Programming. No Starch Press. ISBN: 978-1593279288. (Publisher website)</li> <li>Dr.Qiusheng Wu online lecture</li> </ul>"}]}